{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/using-wasm-with-react","result":{"data":{"markdownRemark":{"html":"<p>WebAssembly (WASM) is a binary format for the executable code in the browsers.\nIn this article, we will create a simple web application using React library, write and compile to WASM a part of our JavaScript code and after that link it to the application.</p>\n<p>We need a minimal application with a React library. I don't describe how to create it from scratch, you can read about it in the article <a href=\"https://www.robinwieruch.de/minimal-react-webpack-babel-setup/\">The minimal React + Webpack 4 + Babel Setup</a>. The application in this <a href=\"https://github.com/rwieruch/minimal-react-webpack-babel-setup\">repository</a> is enough for our needs.</p>\n<h2>Preparing</h2>\n<p>To start using the minimal React application we can clone the repository:</p>\n<pre><code class=\"language-bash\">$ git clone git@github.com:rwieruch/minimal-react-webpack-babel-setup.git wasm_react \n</code></pre>\n<p>Now we can install all dependencies and start the server:</p>\n<pre><code class=\"language-bash\">$ cd wasm_react\n$ yarn install\n$ yarn start\n</code></pre>\n<p>After that you can go to <a href=\"http://localhost:8080\">http://localhost:8080</a> and check if it works.</p>\n<h2>Create canvas component</h2>\n<p>The next thing we should do is to create a new React component with canvas and add the function to drawing.</p>\n<p>For our new component we can create the new file:</p>\n<pre><code class=\"language-bash\">$ touch src/canvas.js\n</code></pre>\n<p>And put in it this code:</p>\n<pre><code class=\"language-javascript\">// src/canvas.js\nimport React, {Component} from \"react\";\n\nclass Canvas extends Component {\n\n  componentDidMount() {\n    let canvas = this.refs.canvas.getContext('2d');\n    canvas.fillRect(0, 0, 100, 100);\n  }\n\n  render() {\n    return (\n        &#x3C;canvas ref=\"canvas\" width={this.props.width} height={this.props.height}/>\n    )\n  }\n}\n\nexport default Canvas;\n</code></pre>\n<p>This component creates canvas using parameters from <code>props</code> and after that you should see a black rectangle in canvas.</p>\n<p>For rendering the new component we can add it to <code>src/.js</code>:</p>\n<pre><code class=\"language-javascript\">// src/.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Canvas from './canvas';\n\nconst title = 'My Minimal React Webpack Babel Setup';\n\nReactDOM.render(\n  &#x3C;Canvas height={500} width={500} />,\n  document.getElementById('app')\n);\n\nmodule.hot.accept();\n</code></pre>\n<p>Now you can go to a browser and check if you can see a <em>black rectangle</em>:</p>\n<p><img src=\"/images/use-wasm-with-reactjs/wasm.png\" alt=\"Black rectangle on canvas\"></p>\n<h2>Drawing fractals</h2>\n<p>The next thing what we will draw is incredibly beautiful <a href=\"https://en.wikipedia.org/wiki/Mandelbrot_set\">Mandelbrot sets</a>. First, we will implement it using JavaScript and after that we will reimplement it in WebAssembly. More theoretical background about that you can find in this <a href=\"https://progur.com/2017/02/create-mandelbrot-fractal-javascript.html\">article</a>. I have just got the main function from this article.</p>\n<p>Now we can add the <code>mandelIter</code> function to our Canvas component:</p>\n<pre><code class=\"language-javascript\">// scr/canvas.js\nclass Canvas extends Component {\n\n//.....\n\nmandelIter(x, y, maxIter) {\n  let r = x;\n  let i = y;\n  for (let a = 0; a &#x3C; maxIter; a++) {\n    let tmpr = r * r - i * i + x;\n    let tmpi = 2 * r * i + y;\n\n    r = tmpr;\n    i = tmpi;\n\n    if (r * i > 5) {\n      return a/maxIter * 100;\n    }\n  }\n\n  return 0;\n}\n\n//.....\n</code></pre>\n<p>After that, we can add to <code>componentDidMount</code> two loops to iterate over the all pixels in the canvas.</p>\n<p>The updated function:</p>\n<pre><code class=\"language-javascript\">// src/canvas.js\ncomponentDidMount() {\n  let canvas = this.refs.canvas.getContext('2d');\n  let mag = 200;\n  let panX = 2;\n  let panY = 1.25;\n  let maxIter = 100;\n  \n  for (let x = 10; x &#x3C; this.props.height; x++)  {\n    for (let y = 10; y &#x3C; this.props.width; y++)  {\n      let m = this.mandelIter(x/mag - panX, y/mag - panY, maxIter);\n      canvas.fillStyle = (m === 0) ? '#000' : 'hsl(0, 100%, ' + m + '%)'; \n      canvas.fillRect(x, y, 1,1);\n    }\n  }\n}\n</code></pre>\n<p>After this change you can see the Mandelbrot set on the page:</p>\n<p><img src=\"/images/use-wasm-with-reactjs/wasm2.png\" alt=\"Mandelbrot set fractal draws on the canvas\"></p>\n<p>It looks great, doesn't it?</p>\n<h2>Implementing in WebAssembly</h2>\n<p>Now we can implement a function <code>mandelIter</code> in WebAssembly. We can do it by using C++, Rust or Go. But here we will use C++ and an online compiler <a href=\"https://mbebenita.github.io/WasmExplorer/\">WebAssembly Explorer</a>:</p>\n<p>The function <code>mandelIter</code> implemented in C++:</p>\n<pre><code class=\"language-c\">float mandelIter(float x, float y, int maxIter) {\n  float r = x;\n  float i = y;\n  for (int a = 0; a &#x3C; maxIter; a++) {\n    float tmpr = r * r - i * i + x;\n    float tmpi = 2 * r * i + y;\n\n    r = tmpr;\n    i = tmpi;\n\n    if (r * i > 5) {\n      return a/(float) maxIter * 100;\n    }\n  }\n\n  return 0;\n}\n</code></pre>\n<p>Our function after the compilation has some strange name: <code>_Z10mandelIterffi</code>. We will use this name in our JavaScript code.</p>\n<p><img src=\"/images/use-wasm-with-reactjs/wasm3.png\" alt=\"WebAssembly Explorer in browser\"></p>\n<p>After compiling, we can download and put the file in <code>src</code> folder. I have named it <code>fractal.wasm</code>.</p>\n<p>For using wasm in React you just need to add import to <code>Canvas</code>-component:</p>\n<pre><code class=\"language-javascript\">// src/canvas.js\nimport React, {Component} from \"react\";\n\nconst wasm = import(\"./fractal.wasm\");\n\nclass Canvas extends Component {\n</code></pre>\n<p>The next step is updating the <code>componentDidMount</code> function:</p>\n<pre><code class=\"language-javascript\">// src/canvas.js\n\ncomponentDidMount() {\n  wasm.then(wasm => {\n    const mandelIterWASM = wasm._Z10mandelIterffi;\n    let canvas = this.refs.canvas.getContext('2d');\n    let mag = 200;\n    let panX = 2;\n    let panY = 1.25;\n    let maxIter = 100;\n    \n    for (let x = 10; x &#x3C; this.props.height; x++)  {\n      for (let y = 10; y &#x3C; this.props.width; y++)  {\n        // let m = this.mandelIter(x/mag - panX, y/mag - panY, maxIter);\n        let m = mandelIterWASM(x/mag - panX, y/mag - panY, maxIter);\n        canvas.fillStyle = (m === 0) ? '#000' : 'hsl(0, 100%, ' + m + '%)'; \n        canvas.fillRect(x, y, 1,1);\n      }\n    }\n  });\n}\n</code></pre>\n<p>Now for drawing on canvas we are using the function implemented in WebAssembly.</p>\n<p>You can manipulate variables <code>mag</code>, <code>panX</code> and <code>panY</code> to create another form of fractals:</p>\n<img src=\"/images/use-wasm-with-reactjs/fractal_example.png\" alt=\"Fractal example\" width=\"49%\"/>\n<img src=\"/images/use-wasm-with-reactjs/fractal_example1.png\" alt=\"Fractal example\" width=\"49%\"/>\n<p>All code you can find in my <a href=\"https://github.com/janczer/minimal-react-webpack-babel-setup\">repository</a>.</p>","excerpt":"WebAssembly (WASM) is a binary format for the executable code in the browsers.\nIn this article, we will create a simple web application…","frontmatter":{"slug":null,"title":"Using WebAssembly with React","description":null,"author":"ivan","tags":["React","JavaScript","WASM","WebAssembly"],"date":"2018-09-10T22:00:00.000Z","image":"/images/use-wasm-with-reactjs/fractal_example1.png"},"timeToRead":4,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2018-09-11-using-wasm-with-react.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2018-09-11-using-wasm-with-react.md"}}}