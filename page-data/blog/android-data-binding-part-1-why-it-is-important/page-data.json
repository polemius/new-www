{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/android-data-binding-part-1-why-it-is-important","result":{"data":{"markdownRemark":{"html":"<p>Android application code often suffers from being more verbose than it could be. As libraries such as <a href=\"http://androidannotations.org/\">Android Annotations</a> and <a href=\"http://jakewharton.github.io/butterknife/\">ButterKnife</a> have shown that's only partially due to tediousness of Java. The <a href=\"https://events.google.com/io2015/schedule?sid=128c9f91-b6d4-e411-b87f-00155d5066d7\">recently</a> announced <a href=\"https://developer.android.com/tools/data-binding/guide.html\">Android Data Binding</a> library can remove at least part of the boilerplate code we need to write. Since I've always liked <a href=\"http://martinfowler.com/eaaDev/PresentationModel.html\">Presentation Model pattern (MVVM)</a> this is very dear to my heart. However just getting rid of a tedious code is not the main reason I'm so happy to see the new API. Let's recap on common issues developer faces on Android and then I'll show how using mentioned patterns with new offering from Google can mitigate them.</p>\n<h2>Problems with classic approach</h2>\n<p>I'll explain that step by step using a registration form screen example. We need couple of fields like first name, last name and an email address. To make the example a bit more interesting and to make UX better we'll use <a href=\"http://mds.is/float-label-demo/\">floating label</a> pattern. One of the simplest approaches <strong>without data binding</strong> (for first name only) might look like this:</p>\n<script src=\"https://gist.github.com/miensol/52b98f0fcbe89db81441.js?file=RegisterActivityClassic.java\"></script>\n<h3>Memory leaks</h3>\n<p>A seasoned Android developer will immediately spot that we've a potentially leaked activity here. The culprit is of course the anonymous inner class implementing <code>RegisterApi</code> callback (<code>Action2</code>), which in turn uses <code>findViewById</code>. However it's not the mentioned method that retains the activity - in Java every non-static inner class will have <em>implicit</em> reference to the enclosing class instance. While this problem is so common I still haven't found a concise solution in the Android SDK. There are however community driven libraries i.e. <a href=\"http://square.github.io/otto/\">Otto</a> and <a href=\"https://github.com/ReactiveX/RxJava\">RxJava</a> that can help tackle this problem.</p>\n<h3>To much code in Activity</h3>\n<p>Many of us, me including, are guilt of stuffing too much into <code>Activity</code> classes. Writing test and maintaining them can become a nightmare over time. The verbosity of Java only makes the matter worse. One way to slim activities down is to use <a href=\"http://martinfowler.com/eaaDev/uiArchs.html#Model-view-presentermvp\">Presenter pattern</a> written either by hand or with the help of <a href=\"https://github.com/square/mortar\">Mortar</a>. Another solution is to encapsulate more logic into custom view classes used in layouts and using shared static helper methods with common code that calls Android API. Nevertheless, for a programmer that just starts with Android, it's important that the framework provides guidance and samples that encourage separation of concerns - in my opinion up until now that was rarely the case.</p>\n<h3>Maintaining layout files</h3>\n<p>Many if not most screens in Android (and other platforms, too) are <em>read-only</em>. That is they are not forms and fields that user can change. Instead they offer neatly presented content with some way of interacting with it (as opposed to changing it directly). When using Android layout files we're forced to use references (auto generated in <code>R</code> class by aapt) that allow setting view's properties. This isn't something necessarily bad especially if you need to heavily interact with a <code>View</code>. Having said that, how often you used <code>findViewById</code> (or <code>@InjectView</code>) just to set the content of <code>TextView</code> or had to refactor activity fields type because of a change in a layout definition?</p>\n<h2>Android Data Binding can help you.</h2>\n<p>The following code illustrates how registration form might look like <strong>with data binding</strong>:</p>\n<script src=\"https://gist.github.com/miensol/44ac5af33a60ad60cab7.js?file=RegisterActivity.java\"></script>\n<p>The new <code>RegisterActivity</code> is similar to previous example. We inflate the layout differently to initialize data binding and get an instance of <code>ActivityRegisterBinding</code> class. The class, with the name derived from layout name, is generated by data binding and its main purpose is to provide a glue between a view and an observable view model. When using <code>registerApi.register</code> we only reference <code>form</code> variable thus avoid unnecessarily referencing the activity. The <code>RegisterForm</code> class is a <em>view model</em> for our layout and has all the data that <code>activity_register</code> layout requires.</p>\n<script src=\"https://gist.github.com/miensol/44ac5af33a60ad60cab7.js?file=RegisterForm.java\"></script>\n<p>The view model has 3 observable attributes marked with <code>@Bindable</code> annotation. We don't strictly need a backing field as the <code>getFirstNameLabelVisibility</code> shows. What we do need is to fire change notification events, which is done via <code>notifyPropertyChanged</code> and <code>notifyChange</code> methods available on <code>BaseObservable</code>. The former method accepts a field id that is assigned by data binding processor in generated class <code>BR</code> (similarily to <code>R</code> class). Deriving from <code>BaseObservable</code> is not a must - to make a model bindable it has to implement <code>android.databinding.Observable</code>.\nLast but not least a layout file:</p>\n<script src=\"https://gist.github.com/miensol/44ac5af33a60ad60cab7.js?file=activity_register.xml\"></script>\n<p>The data binding library, while still in beta, provides a nice toolset to remove the boilerplate code and improve Android code (unit) testability by extracting the logic from activity (or fragment). When used properly it can also save you from leaking resources. In the <a href=\"%7B%25%20post_url%202015-07-27-android-data-binding-part-2-observer-pattern-to-the-bone%20%25%7D\">next post</a> I'll explain in more detail how it happens.</p>\n<p><em>This article is cross-posted with <a href=\"http://miensol.pl/android/2015/07/20/android-data-binding-part-1-why-it-is-important.html\">my personal blog</a></em></p>","excerpt":"Android application code often suffers from being more verbose than it could be. As libraries such as Android Annotations and ButterKnife…","frontmatter":{"slug":null,"title":"Android Data Binding Part 1: Why it is important","description":null,"author":"piotr","tags":["android"],"date":"2015-07-20 08:36","image":null},"timeToRead":4,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-07-20-android-data-binding-part-1-why-it-is-important.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-07-20-android-data-binding-part-1-why-it-is-important.md"}}}