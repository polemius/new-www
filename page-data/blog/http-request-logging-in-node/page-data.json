{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/http-request-logging-in-node","result":{"data":{"markdownRemark":{"html":"<p>One of the most basic kind of logging every backend application should have is a trace logging of all incoming HTTP requests. Yet it's not easy to make it right and useful. Most of the backends we create at Bright nowadays are Node.JS applications based on <a href=\"https://expressjs.com/\">Express</a>. Although there is a <a href=\"https://www.npmjs.com/search?q=logging\">plethora of libraries</a> that are to handle logging for you, we would not be ourselves if we haven't tried to build something on our own (even if only for the sake of knowing the internals better). Let me show you what we have learned and what we do to ensure our logs are meaningful and useful.</p>\n<h2>Log both requests and responses</h2>\n<p>The processing of an incoming HTTP request might consist of many tasks we want our backend to do including database queries, third party service calls and all kinds of data processing. By the nature of Node.JS, Express processes it asynchronously. The incoming data and the outgoing result of the HTTP request being processed are also decoupled in the Node's <code>http</code> module's code via the separation of <a href=\"https://nodejs.org/api/http.html#http_class_http_clientrequest\"><code>ClientRequest</code></a> from <a href=\"https://nodejs.org/api/http.html#http_class_http_serverresponse\"><code>ServerResponse</code></a> objects. </p>\n<p>These are the reasons we should always care about the beginning and the end of the processing pipeline separately and log both of them. In Express it's easy to use <a href=\"https://expressjs.com/en/guide/using-middleware.html\">middlewares</a> to stow into the beginning of the processing and execute our logging code there. Let's start with this simplistic approach, written in TypeScript:</p>\n<pre><code class=\"language-typescript\">const logRequestStart = (req: Request, res: Response, next: NextFunction) => {\n    console.info(`${req.method} ${req.originalUrl}`)\n    next()\n}\n\napp.use(logRequestStart)\n</code></pre>\n<p>It's definitely missing a lot of general identification stuff to be useful, but it's a start. We're logging request's method (GET, POST etc.) and its <a href=\"http://expressjs.com/en/api.html#req.originalUrl\">original URL</a> - note that <code>req.url</code> might not necessarily keep the same value as it might be manipulated by our Express-based router.</p>\n<p><img src=\"/images/node-logging.jpeg\" alt=\"Node.JS logging\"></p>\n<p>How about logging the other end of the processing pipeline? We have no generic way to attach a middleware to the end of processing and appending the <code>logRequestEnd</code> middleware manually at the end of each route definition would be very repetitive and cumbersome. But fortunately, <code>ServerResponse</code> is an <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\"><code>EventEmitter</code></a> - it emits the events when it's finished and we can subscribe with our code there. Here is our updated code (TypeScript again):</p>\n<pre><code class=\"language-typescript\">const logRequestStart = (req: Request, res: Response, next: NextFunction) => {\n    console.info(`${req.method} ${req.originalUrl}`) \n    \n    res.on('finish', () => {\n        console.info(`${res.statusCode} ${res.statusMessage}; ${res.get('Content-Length') || 0}b sent`)\n    })\n    \n    next()\n}\n\napp.use(logRequestStart)\n</code></pre>\n<p>Note we now attach a function as a subscriber to <code>finish</code> event emitted by our HTTP response object. It logs the status code and message (<code>200 OK</code>, <code>404 Not Found</code> etc.) and the length of the response body. Although it might be tempting initially to log the whole response data, it will normally be too long to be useful and might not be welcomed by our privacy savvy users if we keep their private data included in the responses in the plain text logs. And if we're only interested in the general outcome of our request, we should better communicate it <a href=\"http://racksburg.com/choosing-an-http-status-code/\">via HTTP status code</a>, anyway.</p>\n<h2>When the request is finished?</h2>\n<p>The code above has (at least) one problem. Not all the responses actually finish - when the request is aborted by the client or internal unhandled error is thrown, <code>ServerResponse</code> emits <code>close</code> and <code>error</code> events accordingly, instead, and we should also subscribe on them. The problem here is, though, we can't expect <code>res.statusCode</code> to be set properly in these cases. This itself is rather obvious, given the fact that the processing was abruptly interrupted for some reason. What is surprising, though, is that when we actually read it anyway, for example assuming that <code>statusCode</code> will be undefined or falsy, we get <code>200</code> (success status code) instead. This tricked us in the past because if we logged it as-is, while reading the logs afterwards we might overlook the fact that the request definitely wasn't that successful. I'd argue that this was a rather strange design decision of Node's <code>http</code> module creators to set the <code>statusCode</code> to 200 initially and let it be overwritten in case of unsuccessful responses - if the outcome is not yet known, it should not falsely indicate it is successful.</p>\n<p>The TypeScript code that handles these cases correctly might look as follows:</p>\n<pre><code class=\"language-typescript\">const getLoggerForStatusCode = (statusCode: number) => {\n    if (statusCode >= 500) {\n        return console.error.bind(console)\n    }\n    if (statusCode >= 400) {\n        return console.warn.bind(console)\n    }\n\n    return console.log.bind(console)\n}\n\nconst logRequestStart = (req: ApiRequest, res: Response, next: NextFunction) => {\n    console.info(`${req.method} ${req.originalUrl}`) \n    \n    const cleanup = () => {\n        res.removeListener('finish', logFn)\n        res.removeListener('close', abortFn)\n        res.removeListener('error', errorFn)\n    }\n\n    const logFn = () => {\n        cleanup()\n        const logger = getLoggerForStatusCode(res.statusCode)\n        logger(`${res.statusCode} ${res.statusMessage}; ${res.get('Content-Length') || 0}b sent`)\n    }\n\n    const abortFn = () => {\n        cleanup()\n        console.warn('Request aborted by the client')\n    }\n\n    const errorFn = err => {\n        cleanup()\n        console.error(`Request pipeline error: ${err}`)\n    }\n\n    res.on('finish', logFn) // successful pipeline (regardless of its response)\n    res.on('close', abortFn) // aborted pipeline\n    res.on('error', errorFn) // pipeline internal error\n\n    next()\n}\n\napp.use(logRequestStart)\n</code></pre>\n<p>Two more things to note here. </p>\n<p>First is that as both successful (2xx) and gracefully unsuccessful (4xx and handled 5xx) are going through the \"ordinary\" <code>finish</code> event route, I added the code to determine what the most correct console logger level to be used is. It has a little effect on the plain text logs output, but while looking at the terminal of the application running it dev, warnings and errors are colored red so they catch the attention more easily.</p>\n<p>Second is the <code>cleanup</code> function that ensures no hanging listeners exist and regardless of which code path is taken, all the listeners are cleared and nothing prevents correct garbage collection.</p>\n<h2>Correlate your requests with responses</h2>\n<p>We're doing well in logging both ends of our pipeline so far, but it's very far from usefulness if our request start logs are not at all correlated with response end logs. When we process many requests simultaneously, we have no way to figure out how long the request processing took or what the URL requested for an unsuccessful response was. Let's fix it by generating a transient identifier for the request being processed and ensuring it is included in all the log entries we create. </p>\n<p>We do it by running a middleware that adds our custom property to the request object and sets its value to the token generated by <a href=\"https://www.npmjs.com/package/gen-uid\"><code>gen-uid</code></a> library although the way we generate the value is not important at all and you might use any other method that provides a value that is unique enough to distinguish a single particular request from another ones.</p>\n<pre><code class=\"language-typescript\">import {token} from 'gen-uid'\n\nreq.requestId = token(true).substr(0, 8)\n</code></pre>\n<p>Then we just append this value every time something is logged. In the simplest case it might look like this:</p>\n<pre><code class=\"language-typescript\">console.info(`[${req.requestId}] ${req.method} ${req.originalUrl}`) \n</code></pre>\n<p>The example output of two overlapping requests now looks like this:</p>\n<pre><code class=\"language-text\">[4e33fab09] GET /users?phrase=Adam\n[8cc01bd69] GET /users?phrase=Jane\n[4e33fab09] 200 OK; 235b sent\n[8cc01bd69] 204 No Content; 0b sent\n</code></pre>\n<h2>Collect all the metadata</h2>\n<p>This starts to be useful, but still we're missing a lot. We don't know when the request happened and who our requester was. But we should be able to <a href=\"/blog/8-steps-to-keep-your-api-sane/\">read most of these from the request headers</a>. The things we collect are: the client version, platform it is running on, user device identification and locale information and also a bits of app-specific user identification (ID, status, roles etc.) that we load based on the authentication token provided (or not provided) in the request. Here is the middleware code that sets up the metadata in the request object.</p>\n<pre><code class=\"language-typescript\">interface RequestApiClient {\n    version: string\n    platformVersion: string\n    device: string\n    locale: string\n}\n\ninterface ApiRequest extends Request {\n    requestId: string\n    apiClient: RequestApiClient\n    user: ApiUser\n}\n\nconst enhanceRequestWithMetadata = (req: ApiRequest, res: Response, next: NextFunction) => {\n    req.requestId = token(true).substr(0, 8)\n\n    req.apiClient = {\n        version: req.get('X-ClientVersion'),\n        platformVersion: req.get('X-ClientPlatformVersion'),\n        device: req.get('X-ClientDevice'),\n        locale: req.get('X-ClientLocale')\n    }\n    \n    req.user = loadUser(req) // app-specific implementation\n\n    next()\n}\n</code></pre>\n<p>In order to remove the repetition while logging these things, let's introduce a wrapper for the Console API that automatically prepends all the messages with all the relevant metadata, always in the same way, to ensure our logs are both readable for humans and processable by the machines.</p>\n<pre><code class=\"language-typescript\">export interface Logger {\n    info(...args)\n    log(...args)\n    warn(...args)\n    error(...args)\n}\n\nclass LoggerImpl {\n    private _req: ApiRequest\n    private _requestImprint: string = ''\n\n    constructor(req?: ApiRequest) {\n        if (req) {\n            this._req = req\n\n            let imprintParts = [req.requestId]\n\n            if (req.apiClient) {\n                imprintParts.push(`${req.apiClient.device || ''} ${req.apiClient.platformVersion || ''}`)\n\n                if (req.apiClient.version) {\n                    imprintParts.push(`#${req.apiClient.version}`)\n                }\n                if (req.apiClient.locale) {\n                    imprintParts.push(`${req.apiClient.locale} locale`)\n                }\n            }\n\n            this._requestImprint = imprintParts.filter(x => !!x).join(', ')\n        }\n    }\n\n    private get _userImprint() {\n        return this._req &#x26;&#x26; this._req.user ? ` ${(this._req.user.role || '').toLowerCase()} ${this._req.user.id}` : ''\n    }\n\n    private _log(level, ...args) {\n        return console[level](new Date().toISOString(), level, `[${this._requestImprint},${this._userImprint}]`, ...args)\n    }\n\n    info(...args) {\n        return this._log('info', ...args)\n    }\n\n    log(...args) {\n        return this._log('log', ...args)\n    }\n\n    warn(...args) {\n        return this._log('warn', ...args)\n    }\n\n    error(...args) {\n        return this._log('error', ...args)\n    }\n}\n</code></pre>\n<p>Now, instead of using Console API directly, we instantiate a <code>Logger</code> instance, monkey-patch it into request object and use it throughout the processing pipeline (also for any regular log messages that happen inside of the pipeline that we do not cover here at all). This way, our logs look like this:</p>\n<pre><code class=\"language-text\">2017-11-05T16:10:49.570Z info [350a7a0e, iPhone8,1 ios11.0.3, #622, de-de locale, no auth] GET /api/v1/user\n2017-11-05T16:10:49.571Z info [6e79bd36, SM-G920F android7.0, #331, en-US locale, user 208ee38f-c636-4180-8dd4-dde48a04a4d1] GET /api/v1/entries\n2017-11-05T16:10:49.704Z log [350a7a0e, iPhone8,1 ios11.0.3, #622, de-de locale, no auth] 401 Unauthorized; 0b sent\n2017-11-05T16:10:50.351Z log [6e79bd36, SM-G920F android7.0, #331, en-US locale, user 208ee38f-c636-4180-8dd4-dde48a04a4d1] 200 OK; 4732b sent\n</code></pre>\n<p>Good enough!</p>","excerpt":"One of the most basic kind of logging every backend application should have is a trace logging of all incoming HTTP requests. Yet it's not…","frontmatter":{"slug":null,"title":"HTTP request logging in Node.JS","description":null,"author":"adam","tags":["node.js","logging"],"date":"2017-11-11T23:00:00.000Z","image":"/images/node-logging.jpeg"},"timeToRead":8,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2017-11-12-http-request-logging-in-node.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2017-11-12-http-request-logging-in-node.md"}}}