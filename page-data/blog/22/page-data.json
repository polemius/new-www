{"componentChunkName":"component---src-templates-blog-list-template-tsx","path":"/blog/22","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"046cce58-3699-5e0e-a7d4-eb25ceeca2da","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-12-09-google-play-services-is-no-longer-a-monolith.md","excerpt":"Nowadays it's getting harder and harder to build a meaningful app and not rely on Google Play Services to aid us in some commonly required features such as maps, better location provider, geo fencing and so much more. Unfortunately up until now the library shipped as a giant monolith ripping us from one third of dex method limit. For curious reader here's are method counts in couple of versions: Version Method Count 3.2.65 6330 4.4.52 16933 5.0.89 20312 6.1.71 23641 and a full breakdown. Google…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"piotr","author_id":null,"title":"Google Play Services is no longer a giant monolith","tags":["android"],"date":"2014-12-09T10:00:00.000Z"},"fields":{"slug":"/blog/2014-12-09-google-play-services-is-no-longer-a-monolith"}}},{"node":{"id":"5784c40b-a928-5636-ad1e-b4d3d3f8242a","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-11-20-integrate-slf4j-with-crashlytics.md","excerpt":"As I mentioned in my previous post having meaningful log entries comes handy during development. When an app reaches beta testers as well as goes live it's equally or even more important to be able to figure out why the app you've carefully coded isn't behaving as it should. Testing the app on all android flavours is literally impossible that's why getting an insight into what caused a crash is vital. Crashlytics Error reporting providers are getting more and more popular. There are plenty of…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"piotr","author_id":null,"title":"Integrate slf4j with Crashlytics","tags":["android"],"date":"2014-11-20T21:00:00.000Z"},"fields":{"slug":"/blog/2014-11-20-integrate-slf4j-with-crashlytics"}}},{"node":{"id":"81de4cd6-62ca-54d9-938c-b1baa25173f8","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-11-11-playing-with-material-design-toolbar-palette.md","excerpt":"Since Android L(ollipop) was presented in June at Google I/O, only two devices on market can run it officially. Nexus 6 and Nexus 9 were released a week ago, and these two guys are ready to go with most recent system from Google, but what about other devices? My Nexus 5 still tryin update everyday, but still no effects :)\nHopefully, we can use some part of Material Design with devices running Android 2.1 and higher, because most of implementation was placed in android-support-v7. I wrote simple…","frontmatter":{"excerpt":"People around the world are waiting for Google to push Lollipop to theirs smartphones. Material Design completely changed the appearance of Android, and did it right. Material Design is really beautiful. But who says we have to wait to see Material.Theme in action? Most of features has been packed into android-support-library. Use it and build app with material for pre-lollipop devices.","comments":true,"image":null,"author":"mateuszklimek","author_id":null,"title":"Playing with Material Design, Toolbar and Palette","tags":["android","materialdesign","android-support-library"],"date":"2014-11-10T23:00:00.000Z"},"fields":{"slug":"/blog/2014-11-11-playing-with-material-design-toolbar-palette"}}},{"node":{"id":"bbcee8ca-20e0-50d0-8454-1f7452476684","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-11-07-xcodeforinjection-meets-command-line.md","excerpt":"I find InjectionForXcode to be an indispensable tool in my daily iOS development. It works brilliantly but generates a lot of noise that I just couldn’t cope with. I use AppCode. Whenever I execute Run -> Patch Project For Injection there’s a flood of messages telling me about changes in each individual prefix.pch file. There’s one prefix file for each CocoaPod in the project so you can imagine the pain of having to press “OK” button in a dozen of alert messages. Additionally after each file has…","frontmatter":{"excerpt":"Meet Injection Helper, a small utility for making InjectionForXcode more friendly to use. Get rid of superfluous messages and a flood of XCode windows opened any time you patch/revert your project.","comments":true,"image":null,"author":"michal","author_id":null,"title":"InjectionForXcode meets command line","tags":["ios","appcode","xcode","injectionforxcode","gem"],"date":"2014-11-06T23:00:00.000Z"},"fields":{"slug":"/blog/2014-11-07-xcodeforinjection-meets-command-line"}}},{"node":{"id":"5a66b150-41f4-5689-aa67-10f71da43a57","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-11-05-attaching-sharejs-to-select.md","excerpt":"One thing that I found missing in ShareJS library was the possibility to attach live concurrent editing to HTML <select> element. Out of the box it works only with text fields - <input> and <textarea> using doc.attachTextarea(elem) function. Working around that deficiency wasn't so trivial. ShareJS works with Operational Transformations that extracts each logical change to the text (addition or removal) and sends only the change information over the wire. It is great for textual elements, but…","frontmatter":{"excerpt":"One thing that I found missing in ShareJS library was the possibility to attach live concurrent editing to HTML &lt;select&gt; element. Out of the box it works only with text fields - &lt;input&gt; and &lt;textarea&gt;. Here is the workaround.","comments":true,"image":null,"author":"adam","author_id":null,"title":"Attaching ShareJS to select HTML element","tags":["sharejs","javascript"],"date":"2014-11-04T23:00:00.000Z"},"fields":{"slug":"/blog/2014-11-05-attaching-sharejs-to-select"}}},{"node":{"id":"6157ade7-50ab-5f44-876c-b21136b75af4","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-11-04-android-listview-with-sections.md","excerpt":"If you need to implement Android ListView with sections like in iOS world then the code below can help you with that. The first thing you need is to implement two View providers, one for section view and second for section entry view. To do that you just have to create a class that implements ListViewWithSectionsAdapter.ViewProvider interface, example below. Another thing you have to implement is DataProvider: Then you need to create an instance of ListViewWithSectionsAdapter class and assing…","frontmatter":{"excerpt":"ListViewWithSectionsAdapter for Android ListView, simple way to implement list view with sections.","comments":true,"image":null,"author":"daniel","author_id":null,"title":"ListViewWithSectionsAdapter for Android ListView, simple way to implement list view with sections.","tags":["android"],"date":"2014-11-03T23:00:00.000Z"},"fields":{"slug":"/blog/2014-11-04-android-listview-with-sections"}}},{"node":{"id":"e4b8d95b-61e2-5984-9177-01f53ee08569","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-11-01-introducing-slf4android.md","excerpt":"Every now and then you have a bug that is hard to reproduce or only happens on certain phones or android versions. The thing that really comes handy in such case is a detailed application log. That's why it's so important to take time to add useful log entries in every non trivial part of the codebase. At the very minimum you'll want to log any errors. Logging frameworks That's why it's so important to create log entries easily. The default solution that comes with Android by means of Log is the…","frontmatter":{"excerpt":null,"comments":null,"image":null,"author":"piotr","author_id":null,"title":"Introducing slf4android - a simple slf4j implementation for android","tags":["android"],"date":"2014-11-01T00:00:00.000Z"},"fields":{"slug":"/blog/2014-11-01-introducing-slf4android"}}},{"node":{"id":"5114004d-a2a4-5102-a3d5-4c5ae949b3ad","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-10-30-sharejs-073-working-example.md","excerpt":"I’m experimenting with ShareJS library, which is intended to allow live concurrent editing like in Google Docs. The demo on their website seems incredibly easy, even though later on the page they are so cruel: “ShareJS is mostly working, but it’s still a bit shit.”. I wouldn’t be so harsh as I was able to have it up and running in less than few hours. But the fact is it wasn’t as easy as it seemed. It looks like the main problem with current state of ShareJS is what is pretty common in wild and…","frontmatter":{"excerpt":"I’m experimenting with ShareJS library, which is intended to allow live concurrent editing like in Google Docs. The demo on their website seems incredibly easy, even though later on the page they are so cruel: “ShareJS is mostly working, but it’s still a bit shit.”. I wouldn’t be so harsh as I was able to have it up and running in less than few hours. But the fact is it wasn’t as easy as it seemed.","comments":true,"image":null,"author":"adam","author_id":null,"title":"ShareJS 0.7.3 working example","tags":["sharejs","nodejs","javascript"],"date":"2014-10-29T23:00:00.000Z"},"fields":{"slug":"/blog/2014-10-30-sharejs-073-working-example"}}}]}},"pageContext":{"limit":10,"skip":210,"numPages":23,"currentPage":22}}}