{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/charts-on-android-1","result":{"data":{"markdownRemark":{"html":"<p>If you have ever needed to add a chart to your Android app, you certainly have heard about <a href=\"https://github.com/PhilJay/MPAndroidChart\">MPAndroidChart</a> by <a href=\"https://github.com/PhilJay\">PhilJay</a>. If not, consider using this powerful library. Let me show you how easy it is to start!</p>\n<p><img src=\"/images/radek/chart_mobile.jpg\" alt=\"header img\"></p>\n<h3>Goal</h3>\n<p>The goal is to build a simple app written in Kotlin which displays a linear chart with static data. To make it a little bit more interesting we're going to provide data with <code>.csv</code> file. It is very simple format for storing table-based data in the form of text files where values are separated with commas (Comma Separated Values). We'll use an <a href=\"http://opencsv.sourceforge.net/\"><code>OpenCSV</code></a> library to parse it.</p>\n<h3>Dependencies</h3>\n<p>First add dependencies to gradle files.</p>\n<pre><code class=\"language-groovy\">allprojects {\n    repositories {\n        ...\n        maven { url \"https://jitpack.io\" }\n</code></pre>\n<pre><code class=\"language-groovy\">dependencies {\n    ...\n    implementation \"com.github.PhilJay:MPAndroidChart:v3.0.3\"\n    implementation \"com.opencsv:opencsv:4.1\"\n</code></pre>\n<h3>Raw Data Set</h3>\n<p>Find some data, for example from <a href=\"https://www.kaggle.com/datasets\"><em>here</em></a>. I've chosen <a href=\"https://www.kaggle.com/GoogleNewsLab/food-searches-on-google-since-2004\"><em>food searches on Google</em></a> set and cut it a little to display comparison of two searches: <code>banana bread</code> and <code>frozen yogurt</code>. The file looks like this:</p>\n<pre><code class=\"language-csv\">id,googleTopic,week_id,value\nbanana-bread,/m/04cym9,2004-01,30\nbanana-bread,/m/04cym9,2004-02,31\nbanana-bread,/m/04cym9,2004-03,24\nbanana-bread,/m/04cym9,2004-04,27\n...\n</code></pre>\n<p>There are <code>676</code> records in both datasets. Values are normalised, so <code>value</code> is between <code>0</code> and <code>100</code>, where <code>0</code> is the lowest number of searches, <code>100</code> is the largest, and the rest are calculated proportionally.</p>\n<p>Put <code>banana_bread.csv</code> &#x26; <code>frozen_yogurt.csv</code> under <code>/app/res/raw</code> directory in your project.</p>\n<p>Now let's make a <code>data class</code> with corresponding field, the simplest as it can be:</p>\n<p><code>FoodSearch.kt</code>  </p>\n<pre><code class=\"language-kotlin\">package com.bi.chartapp\n\ndata class FoodSearch(\n        val id: String,\n        val googleTopic: String,\n        val week_id: String,\n        val value: Int\n)\n</code></pre>\n<h3>How to parse it?</h3>\n<p>Take a look at the parser below:</p>\n<p><code>Parser.kt</code></p>\n<pre><code class=\"language-kotlin\">package com.bi.chartapp\n\nimport com.opencsv.CSVReaderBuilder\nimport java.io.Reader\n\nclass Parser {\n\n    companion object {\n\n        fun toDataSet(reader: Reader): List&#x3C;FoodSearch> {\n\n            val csvReader = CSVReaderBuilder(reader)\n                    .withSkipLines(1)\n                    .build()\n\n            val foodSearches = mutableListOf&#x3C;FoodSearch>()\n            var record = csvReader.readNext()\n\n            while (record != null) {\n                foodSearches.add(FoodSearch(record[0], record[1], record[2], record[3].toInt()))\n                record = csvReader.readNext()\n            }\n\n            return foodSearches\n        }\n    }\n}\n</code></pre>\n<p>The static method builds a list of <code>FoodSearch</code> records based on the provided <code>Reader</code>. You can get a reader from <code>fileStream</code>, which is provided with activity resources. It looks like this:</p>\n<pre><code class=\"language-kotlin\">val streamBananas = resources.openRawResource(R.raw.banana_bread)\nval bananaData = Parser.toDataSet(streamBananas.reader())\n</code></pre>\n<p>Finally our data looks a little bit more friendly. Time to make a chart!</p>\n<h3>Apply data</h3>\n<p>Add <code>LineChart</code> view to your layout, for example:</p>\n<pre><code class=\"language-xml\">&#x3C;com.github.mikephil.charting.charts.LineChart\n        android:id=\"@+id/lineChart\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_centerInParent=\"true\" />\n</code></pre>\n<p>How to manage data now?</p>\n<p><code>LineChart</code> accepts data as an instance of <code>LineData</code> class. <code>LineData</code> is created from at least one instance of <code>LineDataSet</code>. <code>LineDataSet</code> is created from <code>MutableList</code> of <code>Entry</code> objects and <code>String</code> label. Huh. And <code>Entry</code> is an object representing single point on our Chart (basically is an (x,y) representation). It sounds a little bit overwhelming at first, but it is pretty simple. Here are the steps to follow:</p>\n<ol>\n<li>Parse your data from a csv file to a list of any data objects representing a single point on the chart - DONE!</li>\n<li>Map the list of data objects to the list of <code>Entry</code> objects</li>\n<li>Create <code>LineDataSet</code> from the list of entries and label, like \"Banana Bread\"</li>\n<li>Use each of the sets as an argument to create <code>LineData</code> object. Voila.</li>\n</ol>\n<pre><code class=\"language-kotlin\">private fun getEntriesFromCSV(rawResId: Int, label: String): LineDataSet {\n\n    var data: List&#x3C;FoodSearch>? = null\n    resources.openRawResource(rawResId).use { stream ->\n        data = Parser.toDataSet(stream.reader())\n    }\n    val entries: MutableList&#x3C;Entry> = ArrayList()\n\n    data?.mapIndexed { index, foodSearch ->\n        entries.add(\n                Entry(index.toFloat(), foodSearch.value.toFloat(), foodSearch)\n        )\n    }\n\n    return LineDataSet(entries, label)\n}\n</code></pre>\n<p>This function and Parser from the previous paragraph creates <code>LineDataSet</code> from <code>csv</code> resource. Now simply call it for each <code>csv</code> file and create <code>LineData</code>:</p>\n<pre><code class=\"language-kotlin\">val bananaDataSet = getEntriesFromCSV(R.raw.banana_bread, \"Banana Bread\")\nval yogurtDataSet = getEntriesFromCSV(R.raw.frozen_yogurt, \"Frozen Yogurt\")\n\nlineChart.data = LineData(\n        bananaDataSet,\n        yogurtDataSet\n)\n</code></pre>\n<p>That's it, the chart is set up with data!\n<img src=\"/images/radek/chart_ugly.png\" alt=\"chart one\"></p>\n<h3>Make me beautiful - LineChart properties</h3>\n<p>Time to add some colors and spices. The chart layout configuration is very flexible. I'll show you some basic properties, the rest you may find in the <a href=\"https://github.com/PhilJay/MPAndroidChart/wiki\">documentation</a>. Props are separated between dataset-specific and chart-specific.</p>\n<h5>Tune up data sets</h5>\n<p>First add some colors to the resource <code>colors.xml</code> file in order to make banana look a little bit more like <span style=\"color:#ffe100\">banana</span> and yogurt like <span style=\"color:#0085c7\">yogurt</span>.</p>\n<pre><code class=\"language-xml\">&#x3C;color name=\"banana\">#ffe100&#x3C;/color>\n&#x3C;color name=\"yogurt\">#0085c7&#x3C;/color>\n</code></pre>\n<p>We'll configure each of the <code>LineDataSet</code> object the same way, but with a different color. Check out the method below with the comments:</p>\n<pre><code class=\"language-kotlin\">private fun configureSetLayout(set: LineDataSet, color: Int) {\n\n    set.color = color                         // color of the line\n    set.setDrawFilled(true)                   // fill the space between line and chart bottom\n    set.fillColor = color                     // color of the fill\n    set.setDrawCircles(false)                 // disable drawing circles over each Entry point\n    set.mode = LineDataSet.Mode.CUBIC_BEZIER  // round the line\n    set.fillAlpha = 50                        // make fill transparent with alpha (0-255)\n\n}\n</code></pre>\n<p>Now apply configuration to each dataset:</p>\n<pre><code class=\"language-kotlin\">val bananaColor = resources.getColor(R.color.banana, null)\nval yogurtColor = resources.getColor(R.color.yogurt, null)\n\nconfigureSetLayout(bananaDataSet, bananaColor)\nconfigureSetLayout(yogurtDataSet, yogurtColor)\n</code></pre>\n<h5>Tune up a chart</h5>\n<p>You may configure the chart behaviour in many ways. Default setting allows the user to scale the chart with pinching and scroll it. Since our dataset contains ~700 records let's leave the ability to scale the chart along the axis X and only block the ability to scale it along axis Y. Also remove a description from the right bottom corner and highlighting values by tapping. Like that:</p>\n<pre><code class=\"language-kotlin\">lineChart.description.isEnabled = false\n\nlineChart.isHighlightPerTapEnabled = false\nlineChart.isHighlightPerDragEnabled = false\nlineChart.isScaleYEnabled = false\n</code></pre>\n<p>It works more intuitively already. Now notice that the description above the top X axis are float values. They don't say much unfortunately. It would be better if they marked a year's change every 52 weeks! To achieve this use <code>IAxisValueFormatter</code>. It looks like this:</p>\n<pre><code class=\"language-kotlin\">inner class MyAxisFormatter : IAxisValueFormatter {\n    override fun getFormattedValue(value: Float, axis: AxisBase?): String {\n        return if (value.toInt() % 52 == 0) \"${startingYear + value.toInt() / 52}\"\n        else \"\"\n    }\n}\n</code></pre>\n<p>It means that it will display a value only if it is divisible by 52. And then maps the value to a corresponding year (with starting year set to 2004). We need also a proper granularity so there won't be any grid between years.</p>\n<pre><code class=\"language-kotlin\">lineChart.xAxis.valueFormatter = MyAxisFormatter()\nlineChart.xAxis.granularity = 52f\n</code></pre>\n<p> Also who needs an Y axis on both sides? Disable one of them:</p>\n<pre><code class=\"language-kotlin\">lineChart.axisRight.isEnabled = false\n</code></pre>\n<p> Boom! That's it! Looks nice and presents the data clearly. Pinch to zoom, swipe right and left to get through all these years and finally check when a frozen yogurt beats a banana bread in Google searches!<br>\n<img src=\"/images/radek/chart_bjutiful.png\" alt=\"chart two\"><br>\nOh, it looks like every year around summer! Who would know.</p>\n<h3>Refs:</h3>\n<p><a href=\"https://github.com/PhilJay/MPAndroidChart/wiki\">Wiki</a> &#x26; <a href=\"https://github.com/PhilJay/MPAndroidChart/issues\">Issues</a></p>","excerpt":"If you have ever needed to add a chart to your Android app, you certainly have heard about MPAndroidChart by PhilJay. If not, consider using…","frontmatter":{"slug":null,"title":"Your first chart in Android App with CSV parser","description":null,"author":"radek","tags":["android","UI","chart","CSV"],"date":"2018-02-15T23:00:00.000Z","image":"/images/radek/chart_mobile.jpg"},"timeToRead":6,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2018-02-16-charts-on-android-1.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2018-02-16-charts-on-android-1.md"}}}