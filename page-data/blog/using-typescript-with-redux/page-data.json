{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/using-typescript-with-redux","result":{"data":{"markdownRemark":{"html":"<p>Recently we've checked <a href=\"https://brightinventions.pl/blog/5-ways-to-benefit-from-typescript-in-react/\">what benefits TypeScript adds in our React project</a>. Let's now follow the typical path the front-end project takes nowadays and add <a href=\"https://brightinventions.pl/blog/from-react-to-react-redux-in-a-few-steps/\">Redux</a> into the mix. Unfortunately, by default Redux is not really type safe as it is in most cases presented as <a href=\"https://redux.js.org/introduction/core-concepts\">switches over actions with arbitrary payloads</a>. But TypeScript is a powerful beast and with a bit of care we can make our Redux code not only type safe, but also much cleaner and more readable.</p>\n<p><img src=\"/images/react-ts/redux-ts.png\" alt=\"Redux + TypeScript\">{: .center-image}</p>\n<h2>Basic typing</h2>\n<p>Let's dissect the classical To Do list example from the \"<a href=\"https://redux.js.org/introduction/core-concepts\">Core Concepts</a>\" introductory Redux guide's page step-by-step. The global app's state originally looks as follows:</p>\n<pre><code class=\"language-javascript\">{\n  todos: [{\n    text: 'Eat food',\n    completed: true\n  }, {\n    text: 'Exercise',\n    completed: false\n  }],\n  visibilityFilter: 'SHOW_COMPLETED'\n}\n</code></pre>\n<p>It is pretty straightforward to create a type definition for this state:</p>\n<pre><code class=\"language-typescript\">interface Todo {\n    text: string\n    completed: boolean\n}\n\ntype VisibilityFilter = 'SHOW_COMPLETED' | 'SHOW_ALL'\n\ninterface AppState {\n    todos?: Todo[]\n    visibilityFilter?: VisibilityFilter\n}\n</code></pre>\n<p>Note that <code>AppState</code>'s properties are optional as the state might initially be empty and we need to handle it in our code and thus reflect it in our type definition.</p>\n<p>So far so good. Now Actions – they initially look like this:</p>\n<pre><code class=\"language-javascript\">{ type: 'ADD_TODO', text: 'Go to swimming pool' }\n{ type: 'TOGGLE_TODO', index: 1 }\n{ type: 'SET_VISIBILITY_FILTER', filter: 'SHOW_ALL' }\n</code></pre>\n<p>Let's for now use the typing provided by <a href=\"https://github.com/reactjs/redux/blob/master/.d.ts\"><code>redux</code> library itself</a>, specifically <code>AnyAction</code> that only enforces the <code>type</code> property to be set:</p>\n<pre><code class=\"language-typescript\">const actions: AnyAction[] = [\n    { type: 'ADD_TODO', text: 'Go to swimming pool' },\n    { type: 'TOGGLE_TODO', index: 1 },\n    { type: 'SET_VISIBILITY_FILTER', filter: 'SHOW_ALL' }\n]\n</code></pre>\n<p>Better than nothing, we can't have an Action without a type at least and we can put arbitrary data into it.</p>\n<p>Now let me jump to Reducers. Reducers in the original example are implemented this way:</p>\n<pre><code class=\"language-javascript\">function visibilityFilter(state = 'SHOW_ALL', action) {\n  if (action.type === 'SET_VISIBILITY_FILTER') {\n    return action.filter\n  } else {\n    return state\n  }\n}\n​\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([{ text: action.text, completed: false }])\n    case 'TOGGLE_TODO':\n      return state.map(\n        (todo, index) =>\n          action.index === index\n            ? { text: todo.text, completed: !todo.completed }\n            : todo\n      )\n    default:\n      return state\n  }\n}\n\n// top-level reducer\nfunction todoApp(state = {}, action) {\n  return {\n    todos: todos(state.todos, action),\n    visibilityFilter: visibilityFilter(state.visibilityFilter, action)\n  }\n}\n</code></pre>\n<p>Let's use our State and Action type definitions as a first step:</p>\n<pre><code class=\"language-typescript\">function visibilityFilter(state: VisibilityFilter = 'SHOW_ALL', action: AnyAction): VisibilityFilter {\n  if (action.type === 'SET_VISIBILITY_FILTER') {\n    return action.filter\n  } else {\n    return state\n  }\n}\n​\nfunction todos(state: Todo[] = [], action: AnyAction): Todo[] {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([{ text: action.text, completed: false }])\n    case 'TOGGLE_TODO':\n      return state.map(\n        (todo, index) =>\n          action.index === index\n            ? { text: todo.text, completed: !todo.completed }\n            : todo\n      )\n    default:\n      return state\n  }\n}\n\n// top-level reducer\nfunction todoApp(state: AppState = {}, action: AnyAction): AppState {\n  return {\n    todos: todos(state.todos, action),\n    visibilityFilter: visibilityFilter(state.visibilityFilter, action)\n  }\n}\n</code></pre>\n<p>Note that all reducers, regardless of on which level they exist, share the same generic signature:</p>\n<pre><code class=\"language-typescript\">type Reducer&#x3C;S> = (state: S, action: AnyAction) => S;\n</code></pre>\n<p>This is exactly the type that the built-in Redux typings provide, so we can use it in our code directly if we have an urge to generalize it more for some reason.</p>\n<h2>Can we do more?</h2>\n<p>All we have done so far was to add the basic type definitions that could prevent us from a set of typos. But looking at the reducers, we're far from an actual type safety as <code>AnyAction</code>-typed actions – as this <code>any</code> in the name suggests – does not give the TypeScript compiler any clue what payload the particular action type actually carries. We might still make a typo while accessing action's payload properties, assume its wrong type or use the properties of action of another type by mistake and TypeScript has no tool to warn us in this case:</p>\n<pre><code class=\"language-typescript\">function visibilityFilter(state: VisibilityFilter = 'SHOW_ALL', action: AnyAction): VisibilityFilter {\n    if (action.type === 'SET_VISIBILITY_FILTER') {\n        return action.fliter // note the typo here. TypeScript is unable to detect the problem here\n    } else {\n        return state\n    }\n}\n</code></pre>\n<p>But all hope is not lost yet. TypeScript has a powerful feature of <a href=\"https://basarat.gitbooks.io/typescript/docs/types/discriminated-unions.html\">Discriminated Unions</a> and even though this name sounds like some kind of organization of a social minority, it might help us a lot here.</p>\n<p>Let's create detailed type definitions for each kind of action we support:</p>\n<pre><code class=\"language-typescript\">interface AddTodoAction extends Action {\n    type: 'ADD_TODO'\n    text: string\n}\n\ninterface ToggleTodoAction extends Action {\n    type: 'TOGGLE_TODO'\n    index: number\n}\n\ninterface SetVisibilityFilterAction extends Action {\n    type: 'SET_VISIBILITY_FILTER'\n    filter: VisibilityFilter\n}\n</code></pre>\n<p>Note that we extend Redux-provided <code>Action</code> now which only specifies a <code>type</code> property. <code>AnyAction</code> type we used before permits any property to exist in its implementations, so it defeats our desired type safety. Another interesting bit here is that we specify the <code>type</code> property with a literal, making it a good candidate for the discriminator of our discriminated union. Here is the union itself:</p>\n<pre><code class=\"language-typescript\">type TodoAppAction = AddTodoAction | ToggleTodoAction | SetVisibilityFilterAction\n</code></pre>\n<p>Now let's replace <code>AnyAction</code> in our reducers with <code>TodoAppAction</code> and let's see what happens now:</p>\n<pre><code class=\"language-typescript\">function visibilityFilter(state: VisibilityFilter = 'SHOW_ALL', action: TodoAppAction): VisibilityFilter {\n    if (action.type === 'SET_VISIBILITY_FILTER') {\n        return action.filter\n    } else {\n        return state\n    }\n}\n​\nfunction todos(state: Todo[] = [], action: TodoAppAction): Todo[] {\n    switch (action.type) {\n        case 'ADD_TODO':\n            return state.concat([{text: action.text, completed: false}])\n        case 'TOGGLE_TODO':\n            return state.map(\n                (todo, index) =>\n                    action.index === index\n                        ? {text: todo.text, completed: !todo.completed}\n                        : todo\n            )\n        default:\n            return state\n    }\n}\n\nfunction todoApp(state: AppState = {}, action: TodoAppAction): AppState {\n    return {\n        todos: todos(state.todos, action),\n        visibilityFilter: visibilityFilter(state.visibilityFilter, action)\n    }\n}\n</code></pre>\n<p>If you use a TypeScript-aware IDE (like <a href=\"https://www.jetbrains.com/webstorm/\">WebStorm</a>, for example), you might notice that the action properties are now properly colored and the code completion works exactly as we might have dreamt. Let's now try our typo example again:</p>\n<p><img src=\"/images/react-ts/reducer-typo.png\" alt=\"TypeScript properly checks Action payload types\">{: .center-image}</p>\n<p>A victory for humanity, isn't it?</p>\n<h2>Connected Components</h2>\n<p>One more place we might feel betrayed by Redux is where it actually <a href=\"https://redux.js.org/basics/usage-with-react\">binds into React components</a>. Let's use a bit simplified example from the Redux guide again:</p>\n<pre><code class=\"language-jsx\">import { connect } from 'react-redux'\nimport { setVisibilityFilter } from '../actions'\n\n// the component itself\n\nconst Link = ({active, children, onClick}) => {\n  if (active) {\n    return &#x3C;span>{children}&#x3C;/span>\n  }\n​\n  return &#x3C;a href=\"\" onClick={onClick}>\n    {children}\n  &#x3C;/a>\n}\n​\n// redux binding\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    active: ownProps.filter === state.visibilityFilter\n  }\n}\n​\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onClick: () => {\n      dispatch(setVisibilityFilter(ownProps.filter))\n    }\n  }\n}\n​\nconst FilterLink = connect(mapStateToProps, mapDispatchToProps)(Link)\n</code></pre>\n<p>Let's define the types for the <code>Link</code> component's props in the straightforward way:</p>\n<pre><code class=\"language-typescript\">interface LinkProps {\n    active: boolean\n    onClick: () => void\n}\n\nconst Link: React.StatelessComponent&#x3C;LinkProps> = props => {\n  if (props.active) {\n    return &#x3C;span>{props.children}&#x3C;/span>\n  }\n​\n  return &#x3C;a href=\"\" onClick={props.onClick}>\n      {props.children}\n  &#x3C;/a>\n}\n</code></pre>\n<p>This works fine, but this way we can't go further into <code>mapStateToProps</code> or <code>mapDispatchToProps</code> as these methods compose our final props object from independent parts and we either leave it untyped or describe it with some kind of workarounds like <code>Partial&#x3C;LinkProps></code> to at least give us the basic checks:</p>\n<p><img src=\"/images/react-ts/mapprops-partial-typo.png\" alt=\"Workaround on mapStateToProps might help a bit\">{: .center-image}</p>\n<p>Note we don't have a proper type for <code>ownProps</code> here, too, and \"for convenience\" we used <code>any</code>. Also, this approach let us return <code>onClick</code> property here which we clearly expect to be returned only from <code>mapDispatchToProps</code> in this case. Let's be explicit about it and split our props into three separate types: one for own props (passed from the parent component), one for state-based props and one for dispatch-based props:</p>\n<pre><code class=\"language-typescript\">interface LinkOwnProps {\n    filter: VisibilityFilter\n}\n\ninterface LinkStateProps {\n    active: boolean\n}\n\ninterface LinkDispatchProps {\n    onClick: () => void\n}\n\ntype LinkProps = LinkOwnProps &#x26; LinkStateProps &#x26; LinkDispatchProps\n</code></pre>\n<p>And now our Redux bindings are fully type safe:</p>\n<pre><code class=\"language-typescript\">const mapStateToProps = (state: AppState, ownProps: LinkOwnProps): LinkStateProps => {\n    return {\n        active: ownProps.filter === state.visibilityFilter\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch&#x3C;AppState>, ownProps: LinkOwnProps): LinkDispatchProps => {\n    return {\n        onClick: () => {\n            dispatch(setVisibilityFilter(ownProps.filter))\n        }\n    }\n}\n</code></pre>\n<p>For me the type safety given by proper TypeScript definitions made Redux great again. How about you?</p>","excerpt":"Recently we've checked what benefits TypeScript adds in our React project. Let's now follow the typical path the front-end project takes…","frontmatter":{"slug":null,"title":"Using TypeScript with Redux","description":null,"author":"adam","tags":["React","TypeScript","web"],"date":"2018-04-19T22:00:00.000Z","image":"/images/react-ts/redux-ts.png"},"timeToRead":7,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2018-04-20-using-typescript-with-redux.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2018-04-20-using-typescript-with-redux.md"}}}