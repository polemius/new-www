{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/android-viewmodel-injections-revisited","result":{"data":{"markdownRemark":{"html":"<p>In one of <a href=\"https://brightinventions.pl/blog/injectable-android-viewmodels/\">my previous posts</a> I have described how to implement a ViewModel factory that was able to provide ViewModels with their dependencies injected, e.g. an API client, and it was good enough for me at that time. Later on, thanks to <a href=\"https://miensol.pl/\">Piotr</a>, we've found out even better and simpler approach with an additional possibility of injecting Activity- or Fragment-dependant data into ViewModels.</p>\n<p><img src=\"/images/android-viewmodel-injections-revisited/vaccine.jpg\" alt=\"Vaccine\">{: .center-image}</p>\n<h1>Simpler factory</h1>\n<p>Previously, we've created a singleton factory that was supplied with a map of <code>ViewModel</code>-based classes and their respective <code>Provider</code>s. It required us to create a custom <code>ViewModelKey</code> annotation and use Dagger to generate the map using <code>IntoMap</code> bindings. It didn't require a lot of boilerplate code compared to some other solutions I saw at that time, but it wasn't perfect either.</p>\n<p>On the contrary, the new solution is based on a generic ViewModel factory class of which instances are created for each Activity or Fragment instance.</p>\n<pre><code class=\"language-kotlin\">import android.arch.lifecycle.ViewModel\nimport android.arch.lifecycle.ViewModelProvider\nimport dagger.Lazy\nimport javax.inject.Inject\n\nclass ViewModelFactory&#x3C;VM : ViewModel> @Inject constructor(\n    private val viewModel: Lazy&#x3C;VM>\n) : ViewModelProvider.Factory {\n\n    @Suppress(\"UNCHECKED_CAST\")\n    override fun &#x3C;T : ViewModel> create(modelClass: Class&#x3C;T>): T {\n        return viewModel.get() as T\n    }\n}\n</code></pre>\n<p>For example (see the <a href=\"https://github.com/azabost/simple-mvvm-example\">full code here</a>):</p>\n<pre><code class=\"language-kotlin\">class MainViewModel @Inject constructor(\n    private val apiClient: ApiClient\n) : ViewModel() {\n    // ...\n}\n\nclass MainActivity : BaseActivity() {\n\n    @Inject\n    lateinit var vmFactory: ViewModelFactory&#x3C;MainViewModel>\n\n    lateinit var vm: MainViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        vm = ViewModelProviders.of(this, vmFactory)[MainViewModel::class.java]\n\n        // ...\n    }\n}\n</code></pre>\n<p>As you can see, there is much less code and personally I think it's also easier to understand. To make it even more concise, we can add an extension function in the <code>BaseActivity</code> class like this:</p>\n<pre><code class=\"language-kotlin\">abstract class BaseActivity : AppCompatActivity() {\n    // ...\n\n    inline fun &#x3C;reified T : ViewModel> ViewModelFactory&#x3C;T>.get(): T =\n        ViewModelProviders.of(this@BaseActivity, this)[T::class.java]\n}\n</code></pre>\n<p>Then, we can get a ViewModel with just: <code>vm = vmFactory.get()</code></p>\n<p>Analogically, we can add a similar function for Fragments.</p>\n<h1>More possibilities</h1>\n<p>One of the issues we've had was that the singleton factory holding a map of ViewModel providers was widely scoped, therefore it wouldn't let us inject anything coming from a more narrow scope, e.g. Activity's extras or Fragment's arguments.</p>\n<p>Creating a new factory each time makes it possible. In order to achieve this, we need an additional module that knows how to obtain the dependencies. For example:</p>\n<pre><code class=\"language-kotlin\">import com.azabost.simplemvvm.net.response.RepoResponse\nimport dagger.Module\nimport dagger.Provides\n\n@Module\nclass RepoActivityIntentModule {\n    @Provides\n    fun providesRepoResponse(activity: RepoActivity): RepoResponse {\n        return activity.intent.getSerializableExtra(RepoActivity.REPO_RESPONSE_EXTRA) as RepoResponse\n    }\n}\n</code></pre>\n<p>This module must then be added to the respective <code>RepoActivity</code> subcomponent generated by the <code>ContributesAndroidInjector</code> annotation:</p>\n<pre><code class=\"language-kotlin\">import com.azabost.simplemvvm.ui.main.MainActivity\nimport com.azabost.simplemvvm.ui.repo.RepoActivity\nimport com.azabost.simplemvvm.ui.repo.RepoActivityIntentModule\nimport dagger.Module\nimport dagger.android.ContributesAndroidInjector\n\n@Module\nabstract class AndroidInjectorsModule {\n    @ContributesAndroidInjector\n    abstract fun contributeMainActivity(): MainActivity\n\n    @ContributesAndroidInjector(modules = [RepoActivityIntentModule::class])\n    abstract fun contributeRepoActivity(): RepoActivity\n}\n</code></pre>\n<p>Finally, when we get our <code>RepoViewModel</code> in the <code>RepoActivity</code>, it has the data coming from the intent already injected:</p>\n<pre><code class=\"language-kotlin\">class RepoViewModel @Inject constructor(\n    val repoResponse: RepoResponse\n) : ViewModel()\n\nclass RepoActivity : BaseActivity() {\n\n    @Inject\n    lateinit var vmFactory: ViewModelFactory&#x3C;RepoViewModel>\n\n    lateinit var vm: RepoViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_repo)\n\n        vm = ViewModelProviders.of(this, vmFactory)[RepoViewModel::class.java]\n\n        repoData.text = vm.repoResponse.id.toString()\n    }\n\n    companion object {\n        const val REPO_RESPONSE_EXTRA = \"REPO_RESPONSE_EXTRA\"\n    }\n}\n</code></pre>","excerpt":"In one of my previous posts I have described how to implement a ViewModel factory that was able to provide ViewModels with their…","frontmatter":{"slug":null,"title":"Android ViewModel injections revisited","description":null,"author":"azabost","tags":["android"],"date":"2018-06-18T00:00:00.000Z","image":"/images/android-viewmodel-injections-revisited/vaccine.jpg"},"timeToRead":3,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2018-06-14-android-viewmodel-injections-revisited.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2018-06-14-android-viewmodel-injections-revisited.md"}}}