{"componentChunkName":"component---src-templates-blog-list-template-tsx","path":"/blog/18","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"35cb0f57-ec9e-598e-9e1a-475f615d8157","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-11-09-improve-your-development-using-charles.md","excerpt":"In this post, I would like to describe you to set up a proxy using Charles desktop app. I believe that many of you work with API or consume some REST Service. If haven't heard about proxy yet I believe the knowledge from this post will be useful in your future development.\nThe following example concerns an iOS environment and configuring at the OSX system. What the proxy is? To tell you what the Proxy is I use the definition that I found in Charles documentation An HTTP Proxy is a server that…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"kwysocki","author_id":null,"title":"Make your development better. Use the proxy.","tags":["iOS","swift","proxy","web"],"date":"2016-11-08T23:00:00.000Z"},"fields":{"slug":"/blog/2016-11-09-improve-your-development-using-charles"}}},{"node":{"id":"2998b0c1-680e-51c1-8d39-285f5b3fdbd7","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-11-06-purelayout-vs-anchors.md","excerpt":"Last week I've made basic comparison between two libraries that will help you layout your interfaces - PureLayout and SnapKit. You can find this comparison here. Today I'd lake to take the same examples and see how they work with NSLayoutAnchor. NSLayoutAnchor is available to us since iOS 9 and provides us with a new way of creating your constraints. If you do not like creating NSLayoutConstraints using it's initializers or visual format, and do not want any external dependencies for your layout…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"PureLayout vs NSLayoutAnchor - Great confrontation","tags":["iOS"],"date":"2016-11-05T23:00:00.000Z"},"fields":{"slug":"/blog/2016-11-06-purelayout-vs-anchors"}}},{"node":{"id":"f5aefbe5-a7b2-58e1-b7fc-f867b9029967","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-10-31-purelayout-vs-snapkit.md","excerpt":"At first, let me clear something out. I'm heavy PureLayout user. I've been creating my UIs in code for some time now and it's not looking like I'm going back to Interface Builder any time soon. I'm not saying IB is bad, but it's just not the way that I do things. I started working with PureLayout back in Objective-C days and I kept on using it in Swift as well. However, recently I've been interested in a framework called SnapKit, that offers a nice \"swifty\" way of building views in your…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"PureLayout vs SnapKit - Great confrontation","tags":["iOS"],"date":"2016-10-30T23:00:00.000Z"},"fields":{"slug":"/blog/2016-10-31-purelayout-vs-snapkit"}}},{"node":{"id":"b1e64df4-546a-5390-a0a4-7126a61b099a","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-10-22-reactiveswift-manage-your-memory.md","excerpt":"Memory management is a pretty important issue when talking about any kind of system. You can't pretend that your resources are unlimited, and give them out no matter what. When working with ReactiveSwift it's really easy to fall into the pit of wasted resources if you don't follow simple rules. Disposables Basic unit that will help us handle our memory management, when working with ReactiveSwift is disposable. At the same time that you start observing Signal, or start any work with Signal…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"ReactiveSwift - Manage your memory!","tags":["iOS"],"date":"2016-10-21T22:00:00.000Z"},"fields":{"slug":"/blog/2016-10-22-reactiveswift-manage-your-memory"}}},{"node":{"id":"6813233f-76a5-56f3-89f6-d4cb5ac28c88","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-10-17-first-pod-created.md","excerpt":"The first Cocoapod created Hello, today I want to share with you my first created pod. It is called ContactCircularView and it allows you to create circular views with some text or image inside in an easy way. Main inspiration to create it was a Circles (as you can see below) in iOS Contact application.  iPhone Simulator screen shot from iOS Contacts app More information about my pod you can get via link to my Github : GitHub or Cocoapods site : CocoaPods I'll be grateful if you try it ;) This…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"kwysocki","author_id":null,"title":"My first Cocoapod created","tags":["iOS","swift","cocoapods"],"date":"2016-10-16T22:00:00.000Z"},"fields":{"slug":"/blog/2016-10-17-first-pod-created"}}},{"node":{"id":"74525441-c359-5609-8eaa-1a0b7b4f3136","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-8-swift-files-generator.md","excerpt":"For some time, I have been creating iOS apps without using storyboards at all. Because of this fact ,creating screens in the application is connected to some repetitive steps. You create a ViewController, then a View which will be presented in the controller. You want a PageViewController? Create one, set up ViewControllers that will be presented inside it. After some time, you can recognise a pattern and prepare a bunch of code snippets that will do the job for you. Or... You can prepare a code…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Swift files generator","tags":["iOS"],"date":"2016-01-07T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-8-swift-files-generator"}}},{"node":{"id":"52d2a283-1f7b-57ab-96e7-697a860a28e5","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-29-reactivecocoa-4-signal.md","excerpt":"Today, let's take a look at basic aspect of ReactiveCocoa - Signal. What is it? A signal is an event stream. When you create a Signal, you decide what type of values and errors are sent over it. That's different to what it used to be in ReactiveCocoa 2, where RACSignal did not have a value type attached to it. Generally, Signals are representation of event streams that are already in progress. Each signal may have multiple observers, that will detect events pushed inside the stream. A signal may…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"ReactiveCocoa 4 - Signal","tags":["iOS"],"date":"2016-01-28T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-29-reactivecocoa-4-signal"}}},{"node":{"id":"3232383e-ccc6-5a12-bed2-8b08d06b6b71","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-25-reactivecocoa-4-signal-producer.md","excerpt":"Today we will take a look at SignalProducer class which is provided with ReactiveCocoa 4. How should we treat SignalProducer? It should be treated as representation of a operations/tasks. As an example, take a look at this method, which returns a SignalProducer instance. We can use it to create a signal producer and assign it to a variable. Then when we have a producer that we can ask for signals. If we don't start an actual signal, nothing will happen. What is important here, is the fact that…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"ReactiveCocoa 4 - SignalProducer","tags":["iOS"],"date":"2016-01-24T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-25-reactivecocoa-4-signal-producer"}}},{"node":{"id":"e784106e-5548-5ad4-b4b9-0d3c1156beb4","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-21-reactivecocoa-4-mutableproperty.md","excerpt":"MutableProperty which comes with ReactiveCocoa allows us to track variable's changes. Let's take a quick look on how it actually works. Let's assume, that we want to create a bank account balance variable, that we will be tracking later on.  MutableProperty has three fields that we are especially interested in. Value First one is value, which grants us access to a current value of our property. Everytime we change a this value, all observers of signals created by a producer get notified about it…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"ReactiveCocoa 4 - MutableProperty","tags":["iOS"],"date":"2016-01-20T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-21-reactivecocoa-4-mutableproperty"}}},{"node":{"id":"e6d1ecbc-d3a0-538b-bc14-71c78938e95d","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-18-my-thoughts-on-statefulviewcontroller.md","excerpt":"I had a chance to play a little bit with a nice pod that is called StatefulViewController, created by Alexander Schuch. StatefulViewController works with both UIView and UIViewController, and allows you to introduce placeholders for their different states: Loading, Error, Empty or Content. Everything is based on an intuitive protocol and after providing your placeholder views and implementing required methods everything works like a charm. You can find this pod on Alexander's github. I've looked…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"My thoughts on - StatefulViewController","tags":["iOS"],"date":"2016-01-17T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-18-my-thoughts-on-statefulviewcontroller"}}}]}},"pageContext":{"limit":10,"skip":170,"numPages":23,"currentPage":18}}}