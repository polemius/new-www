{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/typescript-tips-from-kotlin-developer-readonly","result":{"data":{"markdownRemark":{"html":"<p>Last time I wrote about using <a href=\"%7B%25%20post_url%202018-04-11-typescript-tips-from-kotlin-developer-const%20%25%7D\"><code>const</code> in TypeScript</a>. This time I will focus on another TypeScript keyword that aids immutability: <code>readonly</code>.</p>\n<h2><code>readonly</code> properties</h2>\n<p>In Kotlin a <code>val</code> keyword can be used to declare a read only property:</p>\n<pre><code class=\"language-kotlin\">class Timer(val start: DateTime){\n    val elapsed: Duration get() = DateTime.now() - start\n}\n\nval now = Timer(DateTime.now())\nprintln(\"Elapsed: ${now.elapsed}\") \nnow.start = DateTime.now() // Error: Val cannot be reassigned\nnow.elapsed = DateTime.now() // Error: Val cannot be reassigned\n</code></pre>\n<p>In the above example we have 2 properties:</p>\n<ul>\n<li><code>start</code> is a read only property which value does not change</li>\n<li><code>elapsed</code> is a read only property that returns different values</li>\n</ul>\n<p>In <a href=\"https://www.typescriptlang.org/\">TypeScript</a> the equivalent behavior is achieved with a help of the <a href=\"https://www.typescriptlang.org/docs/handbook/interfaces.html#readonly-properties\"><code>readonly</code> keyword and getter only properties</a>:</p>\n<pre><code class=\"language-typescript\">class Timer {\n    constructor(readonly start: Date) { }\n\n    get elapsed(): number {\n        return new Date().getTime() - this.start.getTime();\n    } \n}\n\nconst now = new Timer(new Date())\nconsole.log(`elapsed: ${now.elapsed}`)\nnow.start = new Date() // Error: Cannot assign 'start' because it is a constant or a read-only \nnow.elapsed = new Date() // Error: Cannot assign 'elapsed' because it is a constant or a read-only \n</code></pre>\n<p>The above examples highlights an important difference between <code>const</code> and <code>readonly</code>: a <code>readonly</code> property value can change.</p>\n<p>Note that the error message we get when trying to assign <code>start</code> and <code>elapsed</code> is the same even though the properties are declared using different language constructs. This makes sense though. From the caller perspective both properties are read only.</p>\n<h2>Treat mutable as immutable with <code>Readonly&#x3C;T></code></h2>\n<p>One advantage TypeScript has over Kotlin is the ability to easily declare an immutable version of an interface.\nLet us assume that we have an existing interface that is naturally mutable e.g. any regular JavaScript object. </p>\n<pre><code class=\"language-typescript\">const ala = { firstName: \"Ala\", lastName: \"MaKota\", points: 0 }\n// let's use ala as a template and grab its type\ntype Person = typeof ala\n\nfunction newPersonWithBonusPoints(person: Person, amount: number): Person {\n    person.points = person.points + amount;\n    return person;\n}\n\nconst newAla = addPoints(ala, 3)\n</code></pre>\n<p>The function <code>newPersonWithBonusPoints</code> as the name suggests should return a new person with new <code>points</code> value. However, there it is still possible for us to make a mistake when implementing <code>newPersonWithBonusPoints</code> and mutate the supplied instance instead of creating a new one. How can we ensure <code>newPersonWithBonusPoints</code> function does not mutate the argument? With the help of <code>Readonly&#x3C;T></code> this is easy:</p>\n<pre><code class=\"language-typescript\">const ala = { firstName: \"Ala\", lastName: \"MaKota\", points: 0 }\n// let's use ala as a template and grab its type but make it read only\ntype Person = Readonly&#x3C;typeof ala>\n\nfunction newPersonWithBonusPoints(person: Person, amount: number): Person {\n    person.points = person.points + amount; //Error: Cannot assign to 'points' because it is a constant or a read-only property\n    return person;\n}\n</code></pre>\n<p>Notice how with a single <code>Readonly&#x3C;T></code> we can turn any type into its read only equivalent. It is worth mentioning that the <code>Readonly&#x3C;T></code> is shallow i.e. nested objects are still mutable unless explicitly stated otherwise. Thankfully version [TypeScript 2.8]\n(<a href=\"https://github.com/Microsoft/TypeScript/pull/21316\">https://github.com/Microsoft/TypeScript/pull/21316</a>) introduced an ability to define a <code>DeepReadonly&#x3C;T></code> that makes it possible to mark a type as immutable e.g.:</p>\n<pre><code class=\"language-typescript\">interface Address {\n    city: string\n    street: string\n}\n\ninterface Person {\n    address: Address | null\n    firstName: string\n    nickNames: string[]\n}\n\nconst ala: DeepReadonly&#x3C;Person> = {\n    address: { city: \"Gdańsk\", street: \"Słonimskiego\" },\n    firstName: \"Ala\",\n    nickNames: [\"lol\"]\n} as Person\n\n\nala.address.city = 'Name' // Error: cannot assign city because it is constant or readonly\nala.nickNames.push('Kot') // Error: property push does not exist on type DeepReadonlyArray&#x3C;string>\n</code></pre>\n<p>In the example above the compiler does not allow modifying nested <code>address</code> object. Interestingly it also forbids mutating the <code>nickNames</code> array.</p>\n<h3>Runtime safety with <code>Object.freeze</code></h3>\n<p>The <code>Readonly</code> and <code>DeepReadonly</code> will make it impossible to mutate an object in sane fashion in TypeScript code. However, at runtime it is still possible to inadvertently mutate an object where not desired or use a library that mutates a passed in parameter:</p>\n<pre><code class=\"language-typescript\">interface Config {\n    readonly port: string\n}\n// a problematic function that mutates an argument\nfunction start(config) { \n    const c = Object.assign(config, {\n        port: config.port ? parseInt(config.port) : 80\n    })\n}\n\nconst config: Config = {\n    port: '80'\n}\n\nstart(config)\n\nif (config.port === '80') { \n    console.log('Handle default http port'); // This will not be printed!\n}\n</code></pre>\n<p>To avoid such issues I often use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze</code></a> which will make the above example throw an error on the line with <code>Object.assign</code>: <code>TypeError: Cannot assign to read only property 'port' of object '#&#x3C;Object>'</code>. As you can see, the error is now reported right where the problem is introduced.</p>","excerpt":"Last time I wrote about using const in TypeScript. This time I will focus on another TypeScript keyword that aids immutability: readonly…","frontmatter":{"slug":null,"title":"TypeScript tips from Kotlin developer - readonly","description":null,"author":"piotr","tags":["TypeScript","Kotlin","readonly","immutability"],"date":"2018-05-01T22:00:00.000Z","image":"/images/kotlin/kotlin-logo.png"},"timeToRead":4,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2018-05-02-typescript-tips-from-kotlin-developer-readonly.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2018-05-02-typescript-tips-from-kotlin-developer-readonly.md"}}}