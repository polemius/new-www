{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/I-am-hooked-on-react-","result":{"data":{"markdownRemark":{"html":"<p>React has introduced a new feature which allows you to use state and other React feature without writing class, upcoming <a href=\"https://reactjs.org/docs/hooks-overview.html\">Hooks</a>, a new proposal in React 16.8.0, which are going to blow your socks off and enable our stateless function component does more than even before!</p>\n<p><img src=\"/images/I-am-hooked-on-react/intro.jpg\">{: .center-image}</p>\n<h1>Initial work</h1>\n<p>The easiest way to setup environment for learning React with Hooks is run:</p>\n<pre><code>npx create-react-app my-app\ncd my-app\nnpm start\n</code></pre>\n<p>Now, we have initialized React application.\nPlease, make sure that to use the React-Hooks you have installed proper version (the version which I will use is <code>16.8.0</code>) for today it’s the newest version of React.</p>\n<p>If you want to know, which version you are using, please use the command: </p>\n<p><code>npm info react</code></p>\n<p>In case you want to update your react and react-dom please use the command: </p>\n<p><code>npm i react@next react-dom@next</code></p>\n<h1>React Hooks</h1>\n<p>In this post we are going to focus on 3 basic Hooks in React:</p>\n<pre><code>useState\nuseEffect\nuseContext\n</code></pre>\n<p>React has introduced even more, but the following features are more complicated and should be described separately:</p>\n<pre><code>useReducer\nuseCallback\nuseMemo\nuseRef\nuseImperativeMethods\nuseLayoutEffect\n</code></pre>\n<h3>useState</h3>\n<p>Now, you can add state to a functional component. We don't need to write a separate class for that.\nLet's create a simple counter state-less component and add first Hook.</p>\n<pre><code class=\"language-jsx\">export const Counter = () => {\n   return (\n       &#x3C;div>\n           &#x3C;p>Counter value: &#x3C;/p>\n           &#x3C;button onClick={}>Increase&#x3C;/button>\n           &#x3C;button onClick={}>Decrease&#x3C;/button>\n       &#x3C;/div>\n   )\n}\n</code></pre>\n<p>It's the simple Counter. Our counter will increase and decrease the value if user presses Button <code>onClick</code> event.</p>\n<p>The way it works, you can pass the initial state as a first argument, in my case it will be count equal 0. </p>\n<pre><code>const [count, setCount] = useState(0);\n</code></pre>\n<p>The <code>useState</code> Hook returns an array. The first entry of the array is the the current value of the state, at this point it will be 0. The second entry of the array is a function to update the state.</p>\n<p>Now, we can pass the current value of the state and function for update the state:</p>\n<pre><code class=\"language-jsx\">export const Counter = () => {\n   const [count, setCount] = useState(0);\n   return (\n       &#x3C;div>\n           &#x3C;p>Counter value: {count}&#x3C;/p>\n           &#x3C;button onClick={() => {setCount(count + 1)}}>Increase counter&#x3C;/button>\n           &#x3C;button onClick={() => {setCount(count -1)}}>Decrease counter&#x3C;/button>\n       &#x3C;/div>\n   )\n}\n</code></pre>\n<h3>useEffect</h3>\n<p>Hook as ability to avoid the side effects from the function component. It is almost the same like well-known <code>componentDidMount</code> and <code>componentDidUpdate</code>.</p>\n<p>So, simply we wll import and add it to our Counter, and pass an anonymous function as a first argument:</p>\n<pre><code class=\"language-jsx\">const [count, setCount] = useState(0);\nconst [checked, changeCheckbox] = useState(true)\nuseEffect(() => {\n   console.log('hello from useEffect')\n})\n</code></pre>\n<p>For now, the text <code>hello from useEffect</code> will render every time when we change the current value of checkbox (so every time when function flushes changes to the DOM including the first render). </p>\n<p>The real power of <code>useEffect</code> is that we can pass a second optional argument, which is an array. Then we can specify that we want to invoke this effect only in the situation when we change the count value.</p>\n<pre><code class=\"language-jsx\">useEffect(() => {\n   console.log('hello from useEffect')\n}, [count])\n</code></pre>\n<p>Now, the <code>useEffect</code> <strong>will be called only in case that the state of the count will change</strong>. Cool, right?</p>\n<h3>useContext</h3>\n<p>Imagine, the problem is that the name and surname of user from an index file is passed down as a prop to the components. </p>\n<p>We are going to create two additional function components: <code>Header</code> and <code>LoginInfo</code>. The components will only render the value passed as a <code>prop</code> from the <code>Dashboard</code>.</p>\n<p><code>Dashboard</code> which actually does not use it, just passed it down to <code>Header</code> which uses the value from the user state and passes it as well to <code>LoginInfo</code> which also renders the name of the user.\nThis approach is ok, but we have to pass a user through a bunch of components (in our case <code>Dashboard</code> which doesn't care about it). </p>\n<p>One way to make it looks better is to use <code>createContext</code>, to create a new context and returns the current context value, as given by the nearest context provider for the given context.\nSo let's create and export the <code>Context</code> object:</p>\n<pre><code class=\"language-jsx\">import React from 'react'\nconst Context = React.createContext()\nexport default Context\n</code></pre>\n<p>In our index app, we are importing the Context and wrap the whole main page component with <code>&#x3C;Context.Provider></code> and pass the user value from state as a prop. Now, we have an access to all of the\nContext consumers to the value from state and we don’t need to pass it through the components as a prop.</p>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\nimport './App.css';\nimport { Dashboard } from \"./Dashboard\";\nimport Context from './Context'\n\nclass App extends Component {\n   state = {\n       user: 'John Doe'\n   }\n   render() {\n       const {user} = this.state\n       return (\n           &#x3C;Context.Provider value={user}>\n               &#x3C;Dashboard />\n           &#x3C;/Context.Provider>\n       );\n   }\n}\nexport default App;\n</code></pre>\n<p>Right now, we use <code>useContext</code> Hook and wrap our Context, where the value is a value passed from the Provider (our index). Let's assign in to user variable.</p>\n<pre><code class=\"language-jsx\">import React, { useContext } from 'react'\nimport LoginInfo from './LoginInfo'\nimport Context from './Context'\n\nconst Header = () => {\n    const user = useContext(Context)\n    return (\n        &#x3C;div>\n            &#x3C;h1>Welcome {user}&#x3C;/h1>\n            &#x3C;LoginInfo />\n        &#x3C;/div>\n\n    )\n}\n\nexport default Header\n</code></pre>\n<p>The situation will be the same for the <code>LoginInfo</code>. We declare a value <code>user</code> by using <code>useContext</code> Hook and the value is a value passed from the Provider (our index).</p>\n<pre><code class=\"language-jsx\">import React, { useContext } from 'react'\nimport Context from './Context'\n\nconst LoginInfo = () => {\n    const user = useContext(Context)\n    return (\n        &#x3C;h6>Logged as {user}&#x3C;/h6>\n    )\n}\n\nexport default LoginInfo\n</code></pre>\n<p>In <code>LoginInfo</code> and <code>Header</code> now we have prop user as a value, so we can remove the unnecessary prop from the <code>Dashboard</code> which doesn't use it at all. </p>\n<h1>React Hooks restrictions</h1>\n<p>Although it looks nicely, it's really good to know about Hooks:</p>\n<ul>\n<li>Hooks can be only called from React function component,</li>\n<li>Hooks should be only called on the top level. Don't call them inside loops, conditions or nested functions. By following this rule, you ensure that Hooks are called in the same order each time as component renders. That's what allows React to correctly preserve the state of Hooks between multiple <code>useState</code> and <code>useEffect</code> calls. (For more if you are curious, good explain is <a href=\"https://reactjs.org/docs/hooks-rules.html#explanation\">here</a>).</li>\n</ul>\n<h1>Class base component will be no more support?</h1>\n<p>I think that Hooks and class base components will be still useful. The documentation says that <strong>\"There are no plans to remove classes from React\"</strong> and they definitely do not recommend rewriting everything into Hooks. It's individual and you should decide whether use Hooks or Classes.</p>\n<p>Hooks are great feature in React. Personally, I'm using it after stable version release.</p>","excerpt":"React has introduced a new feature which allows you to use state and other React feature without writing class, upcoming Hooks, a new…","frontmatter":{"slug":null,"title":"I am hooked on React","description":null,"author":"patryk","tags":["React","JavaScript","Hooks"],"date":"2019-03-12T23:00:00.000Z","image":"/images/I-am-hooked-on-react/intro.jpg"},"timeToRead":5,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2019-03-13-I-am-hooked-on-react-.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2019-03-13-I-am-hooked-on-react-.md"}}}