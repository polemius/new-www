{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/p2p-in-hyperledger-fabric","result":{"data":{"markdownRemark":{"html":"<p>Due to the modular and plug-and-play architecture hyperledger fabric implements a peer-to-peer protocol based on <strong>gRPC and proto buffers</strong> which allows for bi-directional stream-based messaging. We will examine the individual elements of the protocol and the examples of messages sent in the Hyperlegder network.</p>\n<h2>gRPC basics</h2>\n<p><strong>gRPC</strong> is an alternative to <strong>REST</strong> and other RPC frameworks, based on HTTPS 2.0 which is faster and has improved security features over HTTPS 1.1.</p>\n<p>Like many RPC systems, <strong>gRPC</strong> is based on the idea of defining a service and specifying the methods that can be called remotely. In <strong>gRPC</strong> a client application can directly call methods on a server application on a different machine as if it was a local object, making it easier for you to create distributed applications and services.</p>\n<pre><code class=\"language-bash\">service HelloService {\n  rpc SayHello (HelloRequest) returns (HelloResponse);\n}\n\nmessage HelloRequest {\n  string greeting = 1;\n}\n\nmessage HelloResponse {\n  string reply = 1;\n}\n</code></pre>\n<p>On the server side, the server implements interface and runs a <strong>gRPC</strong> server to handle the client calls. On the client side, the client has a stub (referred to as just a client in some languages) that provides the same methods as the server.</p>\n<p><img src=\"/images/p2p-in-hyperledger-fabric/grcp-graph.png\" alt=\"Grpc graph\"></p>\n<p>Due to the fact that <strong>gRCP</strong> uses <strong>proto buffers</strong>, the server may be written in a different language than the client (for now it supports 10 programming languages).</p>\n<h2>Proto buffers</h2>\n<p><strong>Protocol buffers</strong> are Google's language-neutral, platform-neutral, extensible mechanisms for serialising structured data.</p>\n<p>To better understand how proto buffers work, let's compare it with <strong>JSON</strong>:</p>\n<pre><code class=\"language-bash\">{\"name\":\"Peter\",\"lastName\":\"Jason\"}\n</code></pre>\n<p>This <strong>JSON</strong> object contains 35 characters, 25 of these including { : \" \" , } are informative and the actual message you send contains only 10 characters.</p>\n<p>Let's now implement the same message using proto buffers:</p>\n<pre><code class=\"language-bash\">syntax = \"proto3\";\n\nmessage Identity {\n    string name = 1; \n    string lastName = 2;\n}\n</code></pre>\n<p>This is our simple proto file in which we have defined Identity message. Now let's generate js protobuf classes:</p>\n<pre><code class=\"language-bash\">protoc --js_out=import_style=commonjs,binary:. identity.proto\n</code></pre>\n<p>This will provide simple accessors for each field (like <code>name()</code> and <code>setName()</code>) as well as methods to serialize/parse the whole structure to/from raw bytes.</p>\n<pre><code class=\"language-bash\">// Serialization\n\nvar msg = new pb.Identity()\n\nmsg.setName(\"Peter\")\nmsg.setLastname(\"Jason\")\n\nconst bytes = msg.serializeBinary()\nconsole.log(bytes)\n</code></pre>\n<p>After the serialisation, our 14 bytes long message in <code>UInt8Array</code> format might become the content of our <strong>gRPC</strong> request.</p>\n<pre><code class=\"language-bash\">10 5 80 101 116 101 114 18 5 74 97 115 111 110\n</code></pre>\n<h2>Usage in Hyperledger</h2>\n<p>Now, that we have some basic knowledge of <strong>gRPC and proto buffers</strong>, we can examine how Hyperledger distributes the changes made in our chaincode asset.</p>\n<p>Let's consider createCar function from <code>fabcar</code> chaincode:</p>\n<pre><code class=\"language-bash\">async createCar(ctx, carNumber, make, model, color, owner) {\n    console.info('============= START : Create Car ===========');\n\n    const car = {\n        color,\n        docType: 'car',\n        make,\n        model,\n        owner,\n    }\n\n    await ctx.stub.putState(carNumber,       Buffer.from(JSON.stringify(car)));\n    console.info('============= END : Create Car ===========');\n}\n</code></pre>\n<p>In the end we call <code>ctx.stub.putState</code> function. Let's take a closer look into how this function inserts a new car asset into the world state.</p>\n<p>We are passing two arguments, record <code>key</code> and <code>Buffer</code>, which contain our car asset.</p>\n<p>Inside the function Hyperledger uses <code>putState</code> proto buffer message with key, value and collection field.</p>\n<pre><code class=\"language-bash\">// PutState is the payload of a ChaincodeMessage. It contains a key and value\n// which needs to be written to the transactions write set. If the collection is\n// specified, the key and value would be written to the transactions private\n// write set.\nmessage PutState {\n   string key = 1;\n   bytes value = 2;\n   string collection = 3;\n}\n</code></pre>\n<p>Next it generates js protobuf class, and sets our key and value as payload parameters, which is the part of <code>putState</code> message. We can see that we also have to specify <code>transactionId</code> and channel that we are targeting.</p>\n<pre><code class=\"language-bash\">async handlePutState(collection, key, value, channel_id, txId) {\n    const payload = new _serviceProto.PutState();\n    payload.setKey(key);\n    payload.setValue(value);\n    payload.setCollection(collection);\n\n    const msg = {\n        type: _serviceProto.ChaincodeMessage.Type.PUT_STATE,\n        payload: payload.toBuffer(),\n        txid: txId,\n        channel_id: channel_id\n    };\n\n    return await this._askPeerAndListen(msg, 'PutState');\n}  \n</code></pre>\n<p>This message is sent via <strong>gRPC</strong> request to the defined peers in our connection profile, and now we can start listening to the proposal responses!</p>","excerpt":"Due to the modular and plug-and-play architecture hyperledger fabric implements a peer-to-peer protocol based on gRPC and proto buffers…","frontmatter":{"slug":null,"title":"P2P in Hyperledger Fabric","description":null,"author":"tomek","tags":["blockchain","grpc","hyperledger","blog"],"date":"2020-02-14T15:21:07.486Z","image":"/images/tomek-p2p-in-hyperledger.png"},"timeToRead":3,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2020-02-14-p2p-in-hyperledger-fabric.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2020-02-14-p2p-in-hyperledger-fabric.md"}}}