{"componentChunkName":"component---src-templates-blog-list-template-tsx","path":"/blog/21","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"4c6f01f4-f69d-5e32-befc-63f92b418297","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-04-10-ios-layouts-for-web-developers-4-css-properties-replacements.md","excerpt":"This is the fourth post in the iOS layouts for web developers series. The previous ones were about the controls, control positioning and managing the appearance. This time something more lightweight, I hope. We’ll go through various visual aspects of the controls and see how we can set it up, compared to CSS. Let’s start with the basics - margin and padding. Box model & controlling controls spacing There was a lot of confusion in the past in the web world around the box model, i.e. whether the…","frontmatter":{"excerpt":"In the fourth post in the iOS layouts for web developers series it's time for something more lightweight. We’ll go through various visual aspects of the controls and see how we can set it up, compared to CSS.","comments":true,"image":null,"author":"adam","author_id":null,"title":"iOS layouts for web developers #4 - CSS properties replacements","tags":["iOS"],"date":"2015-04-10T00:00:00.000Z"},"fields":{"slug":"/blog/2015-04-10-ios-layouts-for-web-developers-4-css-properties-replacements"}}},{"node":{"id":"1b801fd3-313d-5f0c-8289-2a5509b882e1","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-04-03-ios-layouts-for-web-developers-3-managing-appearance.md","excerpt":"This is the third part of the iOS layouts for web developers series. The first part was about the controls, the second about its positioning. Now I’m going to tackle how to approach managing the controls appearance - something that we have CSS for in the web. CSS equivalent? CSS was first standardised back in 1996, it was around early 2000s when it became ubiquitous. We've then left behind the times when the <center> tag was used to align content and view specific definitions like fonts or…","frontmatter":{"excerpt":"In the web, we've left behind the times when the view specific definitions like fonts or colors were scattered all over through the HTML structure. Now we’re looking at the iOS layouts. How do we maintain the content vs. presentation separation in iOS?","comments":true,"image":null,"author":"adam","author_id":null,"title":"iOS layouts for web developers #3 - managing the appearance","tags":["iOS"],"date":"2015-04-03T00:00:00.000Z"},"fields":{"slug":"/blog/2015-04-03-ios-layouts-for-web-developers-3-managing-appearance"}}},{"node":{"id":"73840990-64df-5db2-b4a9-5922b5168bf2","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-04-01-cocoaheads-tricity-do-not-reinvent-the-wheel.md","excerpt":"On Tuesday 31th March 2015 I gave a presentation about most popular Cocoa libraries and CocoaPods (http://cocoapods.org) at the local Cocoaheads Tricity group meeting, which we are now co-organizing.  If you have ever wondered what libraries we use at Bright Inventions or you didn't know that you can divide your app into private Pods you may find this presentation interesting. If you are interested in Apple technologies we invite you to Cocoaheads Tricity meetings where we talk and learn about…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"mateusz","author_id":null,"title":"[CocoaHeads Tricity] Do not reinvent the wheel - most popular Cocoa libraries","tags":["iOS","CocoaHeads","CocoaPods"],"date":"2015-03-31T22:00:00.000Z"},"fields":{"slug":"/blog/2015-04-01-cocoaheads-tricity-do-not-reinvent-the-wheel"}}},{"node":{"id":"67c5507c-d513-58e0-96b0-7b83121e965d","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-03-24-ios-layouts-for-web-developers-2-control-positioning.md","excerpt":"In the first part of the iOS layouts for web developers series I’ve discussed controls as the basic building blocks that comprises the layout in iOS world and how that compares to HTML. I haven’t tackled anything about how and where these controls are drawn on the screen. The matter is complex enough so that here is the separate post only about it. Let’s start with restating the acknowledgement that my overall goal here is trying to find best analogies to the web development world, not creating…","frontmatter":{"excerpt":"Continuing the series of posts that looks into the iOS world from the web developer perspective. In the second post we're discussing multiple approaches to setting up where and how the controls on iOS are displayed and how it differs from HTML document flow.","comments":true,"image":null,"author":"adam","author_id":null,"title":"iOS layouts for web developers #2 - control positioning","tags":["iOS"],"date":"2015-03-23T23:00:00.000Z"},"fields":{"slug":"/blog/2015-03-24-ios-layouts-for-web-developers-2-control-positioning"}}},{"node":{"id":"25870599-7e7a-552c-9066-9aca78635d64","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-03-17-setup-appcode-to-work-with-rtl-languages.md","excerpt":"Question How to make iOS Simulator work with Right-To-Left languages when it's started from AppCode? Answer Paste these two parameters: into `program arguments' in Run/Debug Configuration.\n\nappcode-rtl-config\n\nKeep in mind that if you kill the app and start it again in simulator, parameters wouldn't be included for the new process. Thus the app will start in the common LTR mode.\nThe only way to restart the app in RTL is to run the app from AppCode again. See this post on my personal blog.","frontmatter":{"excerpt":"How to make iOS Simulator work with Right-To-Left languages when it's started from AppCode?","comments":true,"image":null,"author":"mateuszklimek","author_id":null,"title":"Setup AppCode to start Simulator in RTL mode","tags":["iOS"],"date":"2015-03-16T23:00:00.000Z"},"fields":{"slug":"/blog/2015-03-17-setup-appcode-to-work-with-rtl-languages"}}},{"node":{"id":"e80cdc98-0b79-5ffe-b9f6-b791a684e678","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-02-27-ios-layouts-for-web-developers-1-basic-building-blocks.md","excerpt":"In the first part of iOS layouts for web developers series I'll have a look at the basic building blocks of the view layer in iOS and compare it to what HTML offers. First, we need to shift our mindset a bit and accept the fact we need to give up some control (pun intended) over our views to the iOS. Elements vs. controls In HTML, everything we can see in the browser is built upon the low-level HTML elements (tags) organized within a hierarchy. The browser draws the elements visual…","frontmatter":{"excerpt":"In the first part of iOS layouts for web developers series I'll have a look at the basic building blocks of the view layer in iOS and compare it to what HTML offers. First, we need to shift our mindset a bit and accept the fact we need to give up some control over our views to the iOS.","comments":true,"image":null,"author":"adam","author_id":null,"title":"iOS layouts for web developers #1 - basic building blocks","tags":["iOS"],"date":"2015-02-26T23:00:00.000Z"},"fields":{"slug":"/blog/2015-02-27-ios-layouts-for-web-developers-1-basic-building-blocks"}}},{"node":{"id":"0bbb8e15-cfe9-546b-9f97-8f9d96e6097b","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-01-25-anchor-child-element-click.md","excerpt":"I had to solve a seemingly trivial bug in an angularjs based application that turned out to be more interesting than usual. The bug The bug report stated that \"Clicking on a label causes page reload\". That should be an easy one I thought to myself and openeded chrome inspector to see a structure of DOM. Here's a simplified version of markup: My intention was to have different behaviour when an anchor or a span element is clicked. Just as in the example above when a is clicked anchorAction should…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"piotr","author_id":null,"title":"Anchor child element click","tags":["html","javascript"],"date":"2015-01-25T17:00:00.000Z"},"fields":{"slug":"/blog/2015-01-25-anchor-child-element-click"}}},{"node":{"id":"4ab89543-6c93-521b-9c27-37ee7e217e06","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-01-11-frame-video-view.md","excerpt":"VideoView is the most straightforward way to show video content in layout. \nIt took a few lines of code to setup and show for example mp4 file. \nIt's fine when you don't care about UX too much, but when you do, things are going to be annoying.\nWhen you tested app for different cases like: change device orientation, swipe the view, lock screen or go to home screen and back to the app, you probably know what I'm talking about. \nIf you don't, take a look at: \nVideoView Black Screen \nVideoView Black…","frontmatter":{"excerpt":"VideoView is the most straightforward way to show video content in layout. <br /> It took a few lines of code to setup and show for example mp4 file. <br /> It's fine when you don't care about UX too much, but when you do, things are going to be annoying.","comments":true,"image":null,"author":"mateuszklimek","author_id":null,"title":"How to avoid flickering and black screen issues when using VideoView?","tags":["android","videoview"],"date":"2015-01-10T23:00:00.000Z"},"fields":{"slug":"/blog/2015-01-11-frame-video-view"}}},{"node":{"id":"c4f8f30f-0023-54de-b7de-3763482b7883","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-01-06-lazy-apk.md","excerpt":"At Bright Inventions we use TeamCity as a continuous integration server. Apart from building, running tests and uploading artifacts we sometimes use it to quickly distribute an android application to clients and test team. However we found using TeamCity UI on a mobile device isn't as pleasing as it could be. That's why we usually recommend downloading updates through a dedicated application such as TeamCity Downloader. While TeamCity Downloader is really easy to use I found it lacks a couple of…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"piotr","author_id":null,"title":"Lazy Apk - a simple TeamCity artifact downloader","tags":["android","TeamCity"],"date":"2015-01-06T21:00:00.000Z"},"fields":{"slug":"/blog/2015-01-06-lazy-apk"}}},{"node":{"id":"2196cd78-ca7c-5d3a-9715-f264138b37db","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-12-21-cocoaheads-tricity-reactivecocoa.md","excerpt":"On Thursday 18th December 2014 I gave a small presentation about ReactiveCocoa to the local Cocoaheads Tricity group. Cocoaheads is a group of passionate iOS and MacOS X developers willing to share their knowledge and learn. If you've never heard of ReactiveCocoa the presentation might plant a seed of interest: It's probably not easy to get started thinking in FRP terms to get most out of ReactiveCocoa - but once you do, using the library is a pleasant experience.","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"piotr","author_id":null,"title":"Reactive Cocoa presented on CocoaHeads Tricity","tags":["iOS","ReactiveCocoa","CocoaHeads"],"date":"2014-12-21T00:00:00.000Z"},"fields":{"slug":"/blog/2014-12-21-cocoaheads-tricity-reactivecocoa"}}}]}},"pageContext":{"limit":10,"skip":200,"numPages":23,"currentPage":21}}}