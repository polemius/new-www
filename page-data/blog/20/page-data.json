{"componentChunkName":"component---src-templates-blog-list-template-tsx","path":"/blog/20","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"33dca79e-4202-5095-8ccd-2b9649fa60fe","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-08-24-simplistic-javascript-dependency-injection-es6-destructuring.md","excerpt":"Recently I got a bit tired with Angular's quirks and intricacies. To freshen up, I'm playing with framework-less JavaScript (Vanilla JS). I'm also getting more and more used to ES6 features. One of the outcomes by now is the idea for the Dependency Injection approach that stays simplistic, decoupled from any framework and still convenient to consume. Destructuring One of the features I like most in ES6 is destructuring. It introduces a convenient syntax for getting multiple values from arrays or…","frontmatter":{"excerpt":"Recently I got a bit tired with Angular's quirks and intricacies. To freshen up, I'm playing with framework-less JavaScript (Vanilla JS). I'm also getting more and more used to ES6 features. One of the outcomes by now is the idea for the Dependency Injection approach that stays simplistic, decoupled from any framework and still convenient to consume.","comments":true,"image":null,"author":"adam","author_id":null,"title":"Simplistic JavaScript dependency injection with ES6 destructuring","tags":["JavaScript","ES6"],"date":"2015-08-24T00:00:00.000Z"},"fields":{"slug":"/blog/2015-08-24-simplistic-javascript-dependency-injection-es6-destructuring"}}},{"node":{"id":"91a0ef83-b54b-593d-b758-25012444ae05","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-08-13-ios-simplest-star-rating-control-ever.md","excerpt":"Recently I had a need to show the simple rating control in one of our iOS apps - the typical row of stars, few leftmost highlighted, the more highlighted, the better the rating is - something as obvious as this: star rating example My first thoughts were wandering around star images one after another, the hell with positioning with frames or multitude of Auto Layout constraints. Nah. The second take led me to EDStarRating, a library that does this pretty well. But all I needed was only to show…","frontmatter":{"excerpt":"Recently I needed to show the simple rating control in one of our iOS apps - the typical row of stars, few leftmost highlighted, the more highlighted, the better the rating is. My first thoughts were wandering around star images one after another, the hell with positioning with frames or multitude of Auto Layout constraints. Nah. I ended up with something much easier and elegant.","comments":true,"image":null,"author":"adam","author_id":null,"title":"iOS: The simplest star rating control ever","tags":["iOS"],"date":"2015-08-13T00:00:00.000Z"},"fields":{"slug":"/blog/2015-08-13-ios-simplest-star-rating-control-ever"}}},{"node":{"id":"a7bcf5f7-3b97-54d0-9494-652a51621ea4","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-07-27-android-data-binding-part-2-observer-pattern-to-the-bone.md","excerpt":"In the previous part I've described typical problems we have to face when developing applications on Android. I've also highlighted that some of them may be mitigated when data binding API is utilized properly. It's time to dive into more details of how this promising API works. Observer Pattern At the root of many of solutions we find in today's APIs is a design pattern. In case of the discussed Android API it is Observer Pattern applied to the bone. In fact this particular pattern is so common…","frontmatter":{"excerpt":null,"comments":null,"image":null,"author":"piotr","author_id":null,"title":"Android Data Binding Part 2: Observer pattern to the bone","tags":["android"],"date":"2015-07-27 08:45"},"fields":{"slug":"/blog/2015-07-27-android-data-binding-part-2-observer-pattern-to-the-bone"}}},{"node":{"id":"33d4bf78-9a34-5bab-8c81-0ea1882cbff1","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-07-20-android-data-binding-part-1-why-it-is-important.md","excerpt":"Android application code often suffers from being more verbose than it could be. As libraries such as Android Annotations and ButterKnife have shown that's only partially due to tediousness of Java. The recently announced Android Data Binding library can remove at least part of the boilerplate code we need to write. Since I've always liked Presentation Model pattern (MVVM) this is very dear to my heart. However just getting rid of a tedious code is not the main reason I'm so happy to see the new…","frontmatter":{"excerpt":null,"comments":null,"image":null,"author":"piotr","author_id":null,"title":"Android Data Binding Part 1: Why it is important","tags":["android"],"date":"2015-07-20 08:36"},"fields":{"slug":"/blog/2015-07-20-android-data-binding-part-1-why-it-is-important"}}},{"node":{"id":"3874d18a-4235-5307-a081-1c233f7443b9","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-07-12-handling-different-user-types-in-android-application.md","excerpt":"In the previous post you can read how to use Session object to maintain current user information through the application lifecycle. Now we'll explore different options of implementing varying behavior depending on user type. When an app has only one user type I find it neat when an application allows me to use it before I'm forced to create an account or sign in. In such a case there will be a, potentially very long, time where we have no way of identifying the user. At the same time we'll want…","frontmatter":{"excerpt":null,"comments":null,"image":null,"author":"piotr","author_id":null,"title":"Handling different user types in Android application","tags":["android"],"date":"2015-07-12 23:40"},"fields":{"slug":"/blog/2015-07-12-handling-different-user-types-in-android-application"}}},{"node":{"id":"c726ec66-83cc-5beb-b9b9-0ce1c158e45c","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-06-30-maintaining-current-user-information-in-android.md","excerpt":"Every but trivial android application needs to maintain information about current user - regardless if he has authenticated or not. While this may sound easy there are still at least handful of ways one can do it - in this article I'm going to explore couple of them. Keeping state in custom Application class This technique boils down to having custom application class like so: While the above is both easy to write and understand there are several problems with it. First and foremost if you would…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"piotr","author_id":null,"title":"Maintaining current user information in Android","tags":["android"],"date":"2015-06-30T00:00:00.000Z"},"fields":{"slug":"/blog/2015-06-30-maintaining-current-user-information-in-android"}}},{"node":{"id":"ef827c76-51e0-5dc9-a09d-afad095eabff","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-06-01-cocoaheads-automate-your-ios-deployment.md","excerpt":"Here come the slides from a talk I gave at the last Cocoaheads Tricity meeting. It's titled \"Automate your iOS deployment a bit\"\nand shows how we approach build and deployment automation at Bright Inventions. In just a few days we're going to publish our \"generate-ios\" Yeoman generator on Github. We welcome you to join us at next Cocoaheads Tricity meetings where we talk and learn about Cocoa, Swift, Objective-C, UX/UI design and everything else related to creating apps on this platform.","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"michal","author_id":null,"title":"[CocoaHeads Tricity] Automate your iOS deployment a bit","tags":["iOS","CocoaHeads","GYP","generate-ios","automation","TeamCity"],"date":"2015-05-31T22:00:00.000Z"},"fields":{"slug":"/blog/2015-06-01-cocoaheads-automate-your-ios-deployment"}}},{"node":{"id":"72e6095b-06f4-5e17-bffd-ac97cf329707","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-05-27-ios-layouts-for-web-developers.md","excerpt":"Almost all of my past development experience is centered around the web. Just recently I had an opportunity to dive into an iOS development and while I enjoy it, I miss a lot of things from the web development world. I've quickly discovered that applying the techniques and approaches directly from the web is often not possible. Sometimes I had to switch to the different mindset than the one I'm used to. To make things easier, I was looking for an iOS begginer guide targeted specifically to the…","frontmatter":{"excerpt":"Recently I had an opportunity to dive into an iOS development and while I enjoy it, I miss a lot of things from the web development world. I was looking for an iOS begginer guide targeted specifically to the web developers like me, but I haven't found any. This is how the idea for this series of blog posts was born.","comments":true,"image":null,"author":"adam","author_id":null,"title":"iOS layouts for web developers","tags":["iOS"],"date":"2015-05-27T00:00:00.000Z"},"fields":{"slug":"/blog/2015-05-27-ios-layouts-for-web-developers"}}},{"node":{"id":"ae7beb21-0d4e-5c95-beeb-384b5b8b21cc","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-05-21-ios-layouts-for-web-developers-5-events-handling.md","excerpt":"Time to finish the iOS layouts for web developers series with the post about events. Earlier in the series you might read about the controls, control positioning, managing the appearance and CSS properties replacements. Touchy state of the mobile touch events Both in the web and in iOS we employ event-based models to define and control the interactions between our application and the external world, especially the user. The general idea of listening and reacting to particular events on specific…","frontmatter":{"excerpt":"Time to finish the iOS layouts for web developers series with the post about events. Both the web and iOS employ similar ideas, but the set of events is distinct and we need to be aware there are different ways to interact with the classical web than with the mobile device.","comments":true,"image":null,"author":"adam","author_id":null,"title":"iOS layouts for web developers #5 - events handling","tags":["iOS"],"date":"2015-05-21T00:00:00.000Z"},"fields":{"slug":"/blog/2015-05-21-ios-layouts-for-web-developers-5-events-handling"}}},{"node":{"id":"1cbc0352-bb97-53a1-ab2a-880d2b3c4304","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-04-13-using-file-resources-in-android-unit-test.md","excerpt":"Since version 1.1 of Android Gradle Plugin we can run unit test on a local JVM on our development machine. It's still experimental feature but I've found it's fully usable.\nFinally Android developers have lighweight build-in tool for unit testing :)\nThe times when we need third party libraries to test unit classes quickly seems to be gone :) \nI had to implement a parser which operates on JSON data returned from REST API. \nThe first thing I thought was to get some sort of responses from the…","frontmatter":{"excerpt":"Since version 1.1 of Android Gradle Plugin we can run unit test on a local JVM on our development machine. In this article I'll demonstrate how to make local resources available in unit test case.","comments":true,"image":null,"author":"mateuszklimek","author_id":null,"title":"Using the file resources in Android POJO unit test","tags":["android","unit-testing"],"date":"2015-04-12T22:00:00.000Z"},"fields":{"slug":"/blog/2015-04-13-using-file-resources-in-android-unit-test"}}}]}},"pageContext":{"limit":10,"skip":190,"numPages":23,"currentPage":20}}}