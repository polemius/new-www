{"componentChunkName":"component---src-templates-blog-list-template-tsx","path":"/blog/19","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"1f293c1d-0fbc-5f0b-ac4c-5f780dafb928","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-15-custom-xcode-key-bindings.md","excerpt":"When I started writing Swift code, I found out that my beloved IDE(AppCode) for Objective-C, was not doing as well as I thought it would. Moreover, I've noticed that XCode did better job in terms of handling CocoaPods, autocompletion, debugging etc. It was more than enough for me to say sorry to XCode and leave AppCode for some time to let it solve it's problems. I really miss it's Objective-C features like code refactoring and it's ability to generate code, but there is no place for…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Custom XCode key bindings","tags":["iOS"],"date":"2016-01-14T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-15-custom-xcode-key-bindings"}}},{"node":{"id":"f629a9b3-e3f5-5bea-b9c8-51762eb623ee","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-13-my-thoughts-on-whisper.md","excerpt":"Lately I've come across a nice pod which makes in-app messaging easier and decided to give it a quick look. I've created a test project in order to see how the pod behaves and my first impression was... \"That was easy!\". If you want to find out how to use this pod, check out Hyperoslo's github, which shows how easy it is to start sending your messages! I took a quick look into the source code of this pod and instantly found two things that caught my eye. Creating UI components First thing that…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"My thoughts on - Whisper","tags":["iOS"],"date":"2016-01-12T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-13-my-thoughts-on-whisper"}}},{"node":{"id":"90321721-103a-5005-a0a2-db86f5b34bfa","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-08-07-reactivecocoa-4-action.md","excerpt":"Today I'll tell you about an Action type that is available in ReactiveCocoa 4. Action is pretty straightforward, It takes input, does some work and returns output. Moreover, it can fail and provide us with an Error type. Let's look at creation of a simple action that takes Int as an input and returns String or NSError if it fails. Execution How do we execute it? In order to do that we have to perform two steps. Create Producer Apply method will return a SignalProducer with Action's output as…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"ReactiveCocoa 4 - Action","tags":["iOS"],"date":"2016-08-06T22:00:00.000Z"},"fields":{"slug":"/blog/2016-08-07-reactivecocoa-4-action"}}},{"node":{"id":"8bbf4eb7-b6b2-5f9b-be46-5926a8184dab","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-8-04-saving-and-loading-data-to-iOS-device.md","excerpt":"Lately I've spent some time wrtiting an app for myself. It is supposed to let you create tasks, mark them as done/undone and then track your progress. I've called it \"Habit Tracker\" and it is available\nhere. While writing this utility I came across a few interesting issues and this blogpost will cover one of them. Saving and Loading data The feature that \"Habit tracker\" surely needed was ability to store and load users tasks. Core data seemed a bit overkill for me, so I decided to use…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"NSKeyedArchiver/Unarchiver","tags":["iOS"],"date":"2015-08-03T22:00:00.000Z"},"fields":{"slug":"/blog/2015-8-04-saving-and-loading-data-to-iOS-device"}}},{"node":{"id":"77688ea0-7b65-562d-8225-9efe3b54f07f","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-12-15-logging-with-retrofit2.md","excerpt":"Retrofit has been updated to 2.0 version.\nIt's a major change in the one of the most popular library for Android platform.\nA lot of things have been changed out there but in this blog post I want to cover how to setup logging properly. Retrofit 1.x - old way In Retrofit 1.x we just call: Retrofit 2.x - new way In Retrofit 2 you should use HttpLoggingInterceptor. Add dependency to build.gradle: Create Retrofit object like follow: RetrofitAdapter doesn't exsist any longer, we have Retrofit class…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"mateuszklimek","author_id":null,"title":"Logging with Retrofit 2","tags":["android"],"date":"2015-12-14T23:00:00.000Z"},"fields":{"slug":"/blog/2015-12-15-logging-with-retrofit2"}}},{"node":{"id":"7189a5d8-fafc-5e78-9ac0-782af862db75","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-12-14-3-tips-for-ios-calabash-beginners.md","excerpt":"Have you ever felt that your app needs UI tests? Are you tired of checking behaviours of your application again and again? Consider using Calabash! What is Calabash? It is an open source framework that is constantly supported by Xamarin. Calabash will let you run your UI tests written in Cucumber on iOS and Android. Moreover, it's really easy to read for people that are not familiar with programming. If you started writing UI tests in Calabash and it isn't going as smooth as you expected, then…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"3 tips for iOS Calabash beginners","tags":["iOS"],"date":"2015-12-13T23:00:00.000Z"},"fields":{"slug":"/blog/2015-12-14-3-tips-for-ios-calabash-beginners"}}},{"node":{"id":"caacd825-eed6-58cf-b779-d1325f1b8e37","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-12-03-quickly-access-application-documents-directory.md","excerpt":"Let me share a small trick that I use to quickly navigate to documents directory for an iOS application that runs in the simulator.\n It requires adding some small snippet of code to the app but it really pays off. Here's the snippet: In essence it creates a symbolic link to app documents directory and puts that symbolic link on your Desktop. Just add it to application:  didFinishLaunchingWithOptions: method and you will find SimulatorDocuments link recreated on your Desktop anytime you run the…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"michal","author_id":null,"title":"Quickly access Documents Directory for the iOS Simulator","tags":["iOS"],"date":"2015-12-02T23:00:00.000Z"},"fields":{"slug":"/blog/2015-12-03-quickly-access-application-documents-directory"}}},{"node":{"id":"7969b459-3b43-53d4-b905-b21d850c45e8","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-10-19-desymbolicate-crash-reports.md","excerpt":"I was struggling again with desymbolicating of iOS app crash logs and thought that it would be nice\nto have a handy script that is a bit easier to use than the multi step process I had been using thus far. There's no rocket science in it,\n just a simple script named desym that seems to work for me and probably will require more than\n one adjustment to work in general. The source code is here on GitHub. The idea is to put .ipa and .dsym.zip file in the same directory and then execute\n./desym.sh…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"michal","author_id":null,"title":"Desymbolicate crash reports from the command line","tags":["iOS"],"date":"2015-10-18T22:00:00.000Z"},"fields":{"slug":"/blog/2015-10-19-desymbolicate-crash-reports"}}},{"node":{"id":"5b3bab07-bfb3-52d7-863f-c327292ff784","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-10-02-apple-watch-iphone-data-transfer.md","excerpt":"Today's post will cover basic data transfer between your iPhone app and Apple Watch app.\nLet's assume that you have already created an Apple Watch extension in your project and you want to transfer some data to your watch.\nAs an example, we will be sending Event object to our watch, so let's have a look at Event class! The most important thing here is to implement NSCoding protocol. We will need it, because we won't be able to send pure Event object to our watch app, however we can easily send…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Data transfer between Apple Watch and iPhone","tags":["iOS"],"date":"2015-10-01T22:00:00.000Z"},"fields":{"slug":"/blog/2015-10-02-apple-watch-iphone-data-transfer"}}},{"node":{"id":"6a5ef111-dcd4-57ae-8d59-fcf2b662086c","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-08-29-queueing-audio-files.md","excerpt":"Today's short post will cover queueing audio files using Swift. In order to do this we will be using AVQueuePlayer. Import AVFoundation in order to use the AVQueuePlayer Create an instance of AVQueuePlayer. Ps. Hold it as instance variable. If you create it as local variable, you will lose it after exiting the scope and audio won't play. Add audio file to queue. Here we will be adding a file which is added to our project. In order to do this, we create an instance of AVPlayerItem and add it to…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Queueing audio files with AVQueuePlayer","tags":["iOS"],"date":"2015-08-28T22:00:00.000Z"},"fields":{"slug":"/blog/2015-08-29-queueing-audio-files"}}}]}},"pageContext":{"limit":10,"skip":180,"numPages":23,"currentPage":19}}}