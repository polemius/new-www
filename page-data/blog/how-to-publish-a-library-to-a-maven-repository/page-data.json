{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/how-to-publish-a-library-to-a-maven-repository","result":{"data":{"markdownRemark":{"html":"<p>A seasoned developer now and then creates a piece of code that he or she would like to <em>reuse</em> in a different project. When such time comes it is useful to know how to publish a library so that it can easily be incorporated into a different project. In this post I will describe how to publish a Kotlin library to <a href=\"https://bintray.com/bintray/jcenter\">JCenter</a> with <code>maven-publish</code> and <code>com.jfrog.bintray</code> Gradle plugins.</p>\n<p><img src=\"/images/publish-library/announce.jpg\" alt=\"publish\"></p>\n<h1>Gradle Maven plugins</h1>\n<p>The first step is to apply <a href=\"https://docs.gradle.org/current/userguide/maven_plugin.html\">Maven plugin</a>. The plugin adds support for deploying artifacts to Maven repositories. Note that in case of multi-project build e.g. <a href=\"https://github.com/bright/shouldko\">ShouldKO</a> the Maven plugin should be applied to every project that defines some artifact to be published. You can use <code>allprojects</code> to get rid of duplication e.g.:</p>\n<pre><code class=\"language-groovy\">allprojects {\n    repositories {\n        jcenter()\n    }\n\n    apply plugin: 'kotlin'\n    apply plugin: 'maven'\n\n    group \"pl.miensol.shouldko\"\n}\n</code></pre>\n<p>For the <a href=\"https://github.com/bintray/gradle-bintray-plugin\"><code>com.jfrog.bintray</code></a> plugin, used later on, to work nicely with Maven artifacts we need to apply additional Gradle plugin. This additional piece is the <a href=\"https://docs.gradle.org/current/userguide/publishing_maven.html\"><code>maven-publish</code></a> plugin which provides ability to publish artifacts in Maven format. All we need to do is to <code>apply plugin: 'maven-publish'</code> in the main project.</p>\n<h1>Define Maven publishing</h1>\n<p>The <a href=\"https://github.com/bintray/gradle-bintray-plugin#step-7-define-artifacts-to-be-uploaded-to-bintray\"><code>com.jfrog.bintray</code></a> plugin relies on properly defined <a href=\"https://docs.gradle.org/current/userguide/publishing_maven.html\">Maven Publications</a>. The Gradle DSL allows us to define them easily basing on project properties e.g.</p>\n<pre><code class=\"language-groovy\">publishing {\n    publications {\n        hamcrest(MavenPublication) {\n            def project = project(':hamcrest')\n            from project.components.java\n            artifact project.sourcesJar { // not required, includes sourcesJar with correct classifer\n                classifier \"sources\"\n            }\n            groupId group\n            artifactId project.name\n            version project.version\n        }\n\n        core(MavenPublication) {\n            def project = project(':core')\n            from project.components.java\n            artifact project.sourcesJar {\n                classifier \"sources\"\n            }\n            groupId group\n            artifactId project.name\n            version project.version\n        }\n    }\n}\n</code></pre>\n<p>The above Maven Publications include sources artifact. Publishing additional classifiers for artifacts is important since <a href=\"https://stackoverflow.com/a/20909695/155213\">it allows for IDE to show a documentation popup or debug through the library source code</a>.  However, one needs to define it first as it is not included by default when applying <code>java</code> or <code>kotlin</code> plugins to a Gradle project. This is easily done as follows:</p>\n<pre><code class=\"language-groovy\">allprojects {\n    task sourcesJar(type: Jar, dependsOn: classes) {\n        from sourceSets.main.allSource\n    }\n}\n</code></pre>\n<h1>Project versioning</h1>\n<p>As you saw above, we have used <code>project.version</code> to indicate a version to <code>MavenPublication</code>. There are multiple strategies to version software but the <a href=\"https://semver.org/\">Semantic Versioning</a> scheme is widely accepted as a standard when it comes to libraries. If you wish to use it then there are plugins available for Gradle to simplify the mundane tasks of maintaining pre-release and patch versions. I like the set of plugin from <a href=\"https://github.com/ajoberstar/gradle-git/wiki\"><code>ajoberstar</code></a> that provide an opinionated way to version your project based on git tags. Applying them is easy:</p>\n<pre><code class=\"language-groovy\">plugins {\n    id \"org.ajoberstar.grgit\" version \"1.7.2\"\n    id \"org.ajoberstar.release-opinion\" version \"1.7.2\"\n}\n</code></pre>\n<p>Now when you issue e.g. <code>gradle build</code> the plugin will <a href=\"https://github.com/ajoberstar/gradle-git/wiki/Release%20Plugins#how-do-i-use-the-opinion-plugin\">infer a next version based on your git repository state</a>:</p>\n<pre><code>> Configure project : \nInferred project: shouldko, version: 0.1.5-dev.0.uncommitted+4f71d34\n</code></pre>\n<h1>Bintray upload</h1>\n<p>Finally, when we are ready to upload our library and make it available for everyone we need to set up a <a href=\"https://bintray.com/signup/oss\">Bintray account</a>. Once we have it, on the <a href=\"https://bintray.com/profile/edit\">profile</a> page we can access API key required to configure <a href=\"https://github.com/bintray/gradle-bintray-plugin\">the Bintray</a> Gradle plugin.</p>\n<pre><code class=\"language-groovy\">bintray {\n    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')\n    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')\n    publications = ['core', 'hamcrest']\n    pkg {\n        repo = 'maven'\n        name = 'shouldko'\n        desc = 'Adds source line to tests assertion messages'\n        userOrg = 'brightinventions'\n        licenses = ['MIT']\n        vcsUrl = 'https://github.com/bright/shouldko.git'\n        labels = ['tests', 'hamcrest', 'junit']\n    }\n}\n</code></pre>\n<p><strong>The Bintray API key should be kept private and by no means included in the source code repository.</strong>\nWe can configure <code>user</code> and <code>key</code> by looking at project properties and if not available using environment variables. This way there is no need to expose them publicly. </p>\n<pre><code class=\"language-bash\">gradle build bintrayUpload -PbintrayUser=&#x3C;apiUser> -PbintrayApiKey=&#x3C;apikKey>\n</code></pre>\n<p>The <code>repo</code> is the name of the Bintray repository. You can use the same Bintray repository to host multiple projects.</p>\n<p>The Bintray plugin is very taciturn thus I like to add some log message to see when the <code>bintrayUpload</code> completes:</p>\n<pre><code class=\"language-groovy\">afterEvaluate {\n    tasks.bintrayUpload.doLast {\n        logger.lifecycle(\"Uploaded artifacts to bintray at version $version\")\n    }\n}\n</code></pre>\n<h1>Travis build</h1>\n<p>Every project should have at least some form of <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\">continuous integration</a>. For open source software there are at least couple of free build servers available. <a href=\"https://travis-ci.org\">Travis</a> is probably the most popular one. For gradle project Travis will by default call <code>build</code>. If you would like to upload the build artifacts to Bintray whenever successful build completes you need to add a line to <code>script</code> section of the <code>.travis.yml</code> like so:</p>\n<pre><code class=\"language-yaml\">script:\n  - ./gradlew build\n  - ./gradlew bintrayUpload\n</code></pre>\n<p>Obviously the Bintray credentials need to be configured as well which can be done through a project configuration page:</p>\n<p><img src=\"/images/publish-library/travis-configure.png\" alt=\"TravisCI environment configuration\"></p>\n<p>Now, the Gradle git plugin will create a development version and publish it to Bintray on every Travis build.</p>\n<h1>Tag to release</h1>\n<p>Whenever you want to release a new version of the library you now can simply tag a particular version e.g.</p>\n<pre><code class=\"language-bash\">git tag 0.1.4\ngit push origin 0.1.4\n</code></pre>\n<p>After a local or continuos integration build completes you should see a new version in the Bintray web application. From there you need <a href=\"https://bintray.com/docs/usermanual/starting/starting_tutorial2uploading.html\">to publish the version</a>.</p>\n<h1>Use the new library</h1>\n<p>Once a version is published, you can consume it from a maven or gradle project easily. Until you <a href=\"https://bintray.com/bintray/jcenter\">link your package to JCenter</a>, you need to inform your build system about a new maven repository location e.g.:</p>\n<pre><code class=\"language-groovy\">repositories {\n    jcenter()\n    maven { url 'https://dl.bintray.com/brightinventions/maven' }\n}\n</code></pre>\n<p>Note that <code>brightinventions</code> is the organization user name and <code>maven</code> is the repository name mentioned above. You are now, finally able to consume your library 🎉:</p>\n<pre><code class=\"language-groovy\">compile 'pl.miensol.shouldko:hamcrest:0.1.4'\n</code></pre>\n<p>Enjoy!</p>","excerpt":"A seasoned developer now and then creates a piece of code that he or she would like to reuse in a different project. When such time comes it…","frontmatter":{"slug":null,"title":"How to publish a library to a Maven repository with the maven-publish plugin","description":null,"author":"piotr","tags":["maven","jcenter","jvm","gradle","kotlin"],"date":"2018-02-05T23:00:00.000Z","image":"/images/publish-library/announce.jpg"},"timeToRead":5,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2018-02-06-how-to-publish-a-library-to-a-maven-repository.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2018-02-06-how-to-publish-a-library-to-a-maven-repository.md"}}}