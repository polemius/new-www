{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/reactivecocoa-4-action","result":{"data":{"markdownRemark":{"html":"<p>Today I'll tell you about an <code>Action</code> type that is available in ReactiveCocoa 4.</p>\n<p><code>Action</code> is pretty straightforward, It takes input, does some work and returns output. Moreover, it can fail and provide us with an <code>Error</code> type. Let's look at creation of a simple <code>action</code> that takes <code>Int</code> as an input and returns <code>String</code> or <code>NSError</code> if it fails.</p>\n<pre><code class=\"language-swift\">let action = Action&#x3C;Int, String, NSError>({ (number) -> SignalProducer&#x3C;String, NSError> in\n  return SignalProducer&#x3C;Void, NSError> {observer, disposable in\n    observer.sendNext(\"Number is \\(number)\")\n    observer.sendCompleted()\n  }\n})\n</code></pre>\n<h1>Execution</h1>\n<p>How do we execute it? In order to do that we have to perform two steps.</p>\n<h2>Create Producer</h2>\n<pre><code class=\"language-swift\">let producer = action.apply(5)\n</code></pre>\n<p><code>Apply</code> method will return a <code>SignalProducer</code> with <code>Action's</code> output as value (<code>String</code>) and error of <code>ActionError</code> type. <code>ActionError</code> is an enum that can be either <code>NotEnabled</code> or <code>ProducerError</code>. <code>ProducerError</code> is a wrapper around error type that specify in our <code>Action</code>.</p>\n<h2>Execute</h2>\n<pre><code class=\"language-swift\">prodcuer.startWithSignal { (signal, disposable ) in\n  signal.observeNext({ (value) in\n    print(\"\\(value)\")\n  })\n  signal.observeFailed({ (actionError) in\n    print(\"\\(actionError)\")\n  })\n}\n</code></pre>\n<p>Actual execution happens when we start a <code>Signal</code> from received <code>SignalProducer</code>. If we don't do it, nothing will happen.</p>\n<h2>Repeating action</h2>\n<p>Remember the <code>observer.sendCompleted()</code> part in our action's <code>SignalProducer</code>? It is really important, in fact we need to provide any terminating <code>Event</code> when we want to finish executing our <code>Action</code>. If we do not do that, any <code>Signal</code> started from <code>SignalProducer</code> will immediately receive <code>NotEnabled</code> error and we won't receive any values.</p>\n<pre><code class=\"language-swift\">let action = Action&#x3C;Int, String, NSError>({ (number) -> SignalProducer&#x3C;String, NSError> in\n  return SignalProducer&#x3C;String, NSError> {observer, disposable in\n    observer.sendNext(\"Number is \\(number)\")\n    let delayTime = dispatch_time(DISPATCH_TIME_NOW, Int64(1 * Double(NSEC_PER_SEC)))\n    dispatch_after(delayTime, dispatch_get_main_queue()) {\n      observer.sendCompleted()\n    }\n  }\n})\n\nlet prodcuer = action.apply(5)\nprodcuer.startWithSignal { (signal, _ ) in\n  signal.observeNext({ (value) in\n    print(\"1 - \\(value)\")\n  })\n\n  signal.observeFailed({ (actionError) in\n    print(\"1 - \\(actionError)\")\n  })\n}\n\nprodcuer.startWithSignal { (signal, _ ) in\n  signal.observeNext({ (value) in\n    print(\"2 - \\(value)\")\n  })\n\n  signal.observeFailed({ (actionError) in\n    print(\"2 - \\(actionError)\")\n  })\n}\n</code></pre>\n<p>Reveived output: \"<code>1 - Number is 5</code>\" and \"<code>2 - NotEnabled</code>\".<br>\nWe receive this output because of the fact that when we try to execute our action second time, our first execution hasn't completed yet.</p>\n<h1>Observing Action</h1>\n<p>Beside observing single execution of an <code>Action</code>, you can also observe <code>Action</code> itself and you'll receive values that come from each execution. Prepare for a fun part now. There are three ways to observe <code>Action's</code> values. You can observe <code>Action's</code> values, <code>Action's</code> errors and <code>Action's</code> events.</p>\n<p>What's the difference? Let's have a look.</p>\n<h2>Action's values</h2>\n<pre><code class=\"language-swift\">let action = Action&#x3C;Int, String, NSError>({ (number) -> SignalProducer&#x3C;String, NSError> in\n    return SignalProducer&#x3C;String, NSError> {observer, disposable in\n        observer.sendNext(\"Number is \\(number)\")\n        let delayTime = dispatch_time(DISPATCH_TIME_NOW, Int64(1 * Double(NSEC_PER_SEC)))\n        dispatch_after(delayTime, dispatch_get_main_queue()) {\n            observer.sendInterrupted()\n        }\n    }\n})\n\naction.values.observe { (event) in\n  print(\"Value: \\(event)\")\n}\n\naction.apply(5).startWithSignal { (_ , _ ) in }\n</code></pre>\n<p>Output: \"<code>Value: Next Number is 5</code>\" and \"<code>Value: COMPLETED</code>\"<br>\nOur values signal is of type <code>Signal&#x3C;Output, NoError></code>, so you won't get any errors here. If any terminating <code>Event</code> occurs during <code>Action's</code> execution, you'll receive <code>COMPLETED</code> event.</p>\n<h2>Action's errors</h2>\n<pre><code class=\"language-swift\">let action = Action&#x3C;Int, String, NSError>({ (number) -> SignalProducer&#x3C;String, NSError> in\n    return SignalProducer&#x3C;String, NSError> {observer, disposable in\n        observer.sendNext(\"Number is \\(number)\")\n        let delayTime = dispatch_time(DISPATCH_TIME_NOW, Int64(1 * Double(NSEC_PER_SEC)))\n        dispatch_after(delayTime, dispatch_get_main_queue()) {\n            observer.sendInterrupted()\n        }\n    }\n})\n\naction.errors.observe { (event) in\n  print(\"Error: \\(event)\")\n}\n\naction.apply(5).startWithSignal { (_ , _ ) in }\n</code></pre>\n<p>Output: \"<code>Error: Next Error Domain=1 Code=1 \"(null)\"</code>\" and \"<code>Error: COMPLETED</code>\"<br>\nErrors' signal is of type <code>Signal&#x3C;Error, NoError></code> so you can focus on observing errors that occur during <code>Action's</code> execution. Keep in mind, that you don't use <code>observeFailed</code> method to observe errors, as they come with <code>NEXT</code> events. After <code>Action's</code> execution is finished, signal will receive <code>COMPLETED</code> event.</p>\n<h2>Action's events</h2>\n<pre><code class=\"language-swift\">let action = Action&#x3C;Int, String, NSError>({ (number) -> SignalProducer&#x3C;String, NSError> in\n    return SignalProducer&#x3C;String, NSError> {observer, disposable in\n        observer.sendNext(\"Number is \\(number)\")\n        let delayTime = dispatch_time(DISPATCH_TIME_NOW, Int64(1 * Double(NSEC_PER_SEC)))\n        dispatch_after(delayTime, dispatch_get_main_queue()) {\n            observer.sendFailed(NSError(domain: \"1\", code: 1, userInfo: nil))\n        }\n    }\n})\n\naction.events.observe { (event) in\n  print(\"Event: \\(event)\")\n}\n\naction.apply(5).startWithSignal { (_ , _ ) in }\n</code></pre>\n<p>Output: \"<code>Event: NEXT NEXT Number is 5</code>\", \"<code>Event: NEXT FAILED Error Domain=1 Code=1 (\"null\")</code>\" and \"<code>Event: COMPLETED</code>\"<br>\nThird option is to observe signal of ALL <code>events</code>. This signal is of type <code>Signal&#x3C;Event&#x3C;Output, Error>, NoError></code>. It means, that you will receive ALL <code>events</code> as next values, even terminating.<br>\nI have to say that this output is a bit confusing. What is \"<code>Event: NEXT NEXT Number is 5</code>\"? Why do we get double <code>NEXT</code> here? Let's go step by step here.\nLet's look at <code>Action's</code> <code>SignalProducer</code> implementation. First thing that we send is <code>observer.sendNext(\"Number is \\(number)\")</code> It will send a <code>NEXT</code> event with a <code>String</code> value.\nOur event's observer receives <code>Next</code> events with <code>Next</code> event from our action. That's why we get \"<code>NEXT NEXT</code>\". Next event that is sent is \"<code>observer.sendFailed(NSError(domain: \"1\", code: 1, userInfo: nil))</code>\". As previously, our <code>Failed</code> event comes to <code>event's</code> observer as <code>Next</code> event. That is why we get \"<code>NEXT FAILED</code>\". After this terminating event, a <code>COMPLETED</code> event is sent to our <code>event's</code> observer indicating that execution has finished.</p>\n<p>I hope that this made <code>Actions</code> clearer to you! See you next time.</p>\n<p><em>This article is cross-posted with my <a href=\"http://eluss.github.io/\">my personal blog</a>.</em></p>","excerpt":"Today I'll tell you about an Action type that is available in ReactiveCocoa 4. Action is pretty straightforward, It takes input, does some…","frontmatter":{"slug":null,"title":"ReactiveCocoa 4 - Action","description":null,"author":"eliasz","tags":["iOS"],"date":"2016-08-06T22:00:00.000Z","image":null},"timeToRead":5,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-08-07-reactivecocoa-4-action.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-08-07-reactivecocoa-4-action.md"}}}