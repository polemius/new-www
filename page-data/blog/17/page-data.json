{"componentChunkName":"component---src-templates-blog-list-template-tsx","path":"/blog/17","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"1079d975-d2a9-56ca-995f-06310a9b526a","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-7-20-reactivecocoa-4-events.md","excerpt":"Understanding signal events in ReactiveCocoa is a must. We can't effectively use signals and signal producers if we don't know what will happen after certain event is received. We distinguish two kinds of events that you can send through signals - terminating and non-terminating. There are three kinds of terminating events: Failed, Interrupted, Completed, and one non-terminating - Next. Signals and events You can either create a pipe with Signal.pipe() that will return signal and observer, or…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"ReactiveCocoa 4 - Events","tags":["iOS"],"date":"2016-07-19T22:00:00.000Z"},"fields":{"slug":"/blog/2016-7-20-reactivecocoa-4-events"}}},{"node":{"id":"5710428b-f71b-591f-8603-8b23810ff143","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-4-3-UIImageConcept.md","excerpt":"Hi! In my first post I want to share with you some cool tip which I watched in 'Swift in Practice - Apple WWDC 2015' Alex Migicovsky presentation about using UIImages in Swift project. Normally you create UIImageView with UIImage like this : or like this But what happens If you have typos (e.g. \"rign\") in file name or there is not an image named \"ring\" ?\nNothing. You don't get any warnings or errors from a compiler. Everything will compile without problems. But unfortunately our UIImageView will…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"kwysocki","author_id":null,"title":"Creating an UIImage using ImageIdentifiers","tags":["iOS","swift"],"date":"2016-04-02T22:00:00.000Z"},"fields":{"slug":"/blog/2016-4-3-UIImageConcept"}}},{"node":{"id":"711d0a52-e62e-5c9d-a338-a563d22d7fde","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-4-25-open-source-by-default.md","excerpt":"Using open source code in projects is a common thing. I do it. Most of us do.\nBut what is \"open source\" by default? Well, I've heard about this for the first time at MCE Conf 2016 - \"Open by default\" panel. It's an idea to make software open by default and close it only if needed. There are many reasons to close it of course, but sometimes we do it unnecessarily. Bad Habits While playing with my side projects I often found myself cutting corners because of the fact that I knew I was the only one…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Open source by default","tags":["OpenSource"],"date":"2016-04-24T22:00:00.000Z"},"fields":{"slug":"/blog/2016-4-25-open-source-by-default"}}},{"node":{"id":"6bb18d82-9702-5ed3-8318-35841657cf5f","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-3-31-fast-way-to-connect-web-proxy.md","excerpt":"Configuring Android device to connect to the web proxy running on development build machine is tedious.\nYou have to make the same steps over and over again on every device you want to debug HTTP traffic.<br/ >\nIt goes like this: Check development machine IP address. Install proxy CA certificate on a mobile device in order to spy HTTPS traffic. Configure wifi connection on the mobile device to connect through the proxy (by typing it by hand). Sometimes I have to enable the proxy for a moment and…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"mateuszklimek","author_id":null,"title":"A fast way to connect to the web proxy","tags":["android"],"date":"2016-03-30T22:00:00.000Z"},"fields":{"slug":"/blog/2016-3-31-fast-way-to-connect-web-proxy"}}},{"node":{"id":"63774a11-988c-5f4c-aa4b-097be890bb95","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-3-29-trust-specific-certificate-on-jvm.md","excerpt":"I wrote simple helper which allow loading specific certificate to SSLContext.\nYou can use it to support HTTPS connections which rely on a untrusted certificate. \nBy untrusted certificate, I mean this one which server is certified but system denies it (doesn't trust it) for some reason.\nI found it very useful to load particular certificate dynamically. For example: Older Android devices don't support some new CA providers. If you want to ship an app with support to such CA and don't want to force…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"mateuszklimek","author_id":null,"title":"Trust specific certificate on JVM-based platforms","tags":["jvm","java","android"],"date":"2016-03-28T22:00:00.000Z"},"fields":{"slug":"/blog/2016-3-29-trust-specific-certificate-on-jvm"}}},{"node":{"id":"a8869a04-8d6b-5110-8e5c-7cd235f7df05","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-2-5-fetching-contacts-with-cncontactstore.md","excerpt":"Since iOS 9.0 we have a new nice method of fetching and saving contacts - CNContactStore!\nToday I will show you how to create a simple UITextField that will be responsible for fetching a contact for you! Setting up Let me introduce you our textfield!  Empty TextField Our text field will be unique this time. It will not behave the way it usually does. After tapping it we don't want to see a keyboard, we want to see contacts! In order to achieve this, first we have to implement specific delegate…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Fetching contacts with CNContactStore","tags":["iOS"],"date":"2016-02-04T23:00:00.000Z"},"fields":{"slug":"/blog/2016-2-5-fetching-contacts-with-cncontactstore"}}},{"node":{"id":"847e8e56-d6e5-596f-b81a-aa23e8003453","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-2-1-heartbeat-button.md","excerpt":"Hi! Today I will show you how to create a simple heart button that will simulate a heartbeat upon each tap. You can find an example project on my Github. Create a button First of all we have to create a button. We create a heart image from the resources that you can find in an example project and we assign it to our button. Then we simply position out button inside a view and assign a certain size to it. The size should equal our heart image's size. Next, we add target to our button's…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Heartbeat button","tags":["iOS"],"date":"2016-01-31T23:00:00.000Z"},"fields":{"slug":"/blog/2016-2-1-heartbeat-button"}}},{"node":{"id":"2ce6de0b-1c4c-5f25-877b-7b4a3f5c9cfd","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-12-12-are-your-views-dumb-enough.md","excerpt":"Hi! As you can see, the title of this post consists of two parts. “Are your views dumb enough” refers to managing code between your classes in project, which is really interesting topic, but there is also a second part — “A way to run your tests without simulator”. Managing your code is pretty straight forward topic and you probably know what to expect from this part, but how do I want to run my tests without simulator? Isn’t a simulator something we really need to test an application? Turns out…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Are your views dumb enough? — A way to run your tests without simulator","tags":["iOS"],"date":"2016-12-11T23:00:00.000Z"},"fields":{"slug":"/blog/2016-12-12-are-your-views-dumb-enough"}}},{"node":{"id":"43feefde-c40e-5304-8930-91c6ece06665","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-12-11-3dtouch-peak-and-pop.md","excerpt":"In my previous post I wrote about adopting UIApplicationShortcutItems in your app. Now it's time to implement Peak&Pop - a feature provided by 3d Touch.  Get started First of all we need to check if our device supports force touch events. Then if our device is familiar with force touch we can easily register our UIViewController for force touch events. Take a look at this snippet: As you can see the above code uses the traitCollection property. It is available in every UIViewController and…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"kwysocki","author_id":null,"title":"3D Touch - Peak&amp;Pop feature.","tags":["iOS","swift","3d touch"],"date":"2016-12-10T23:00:00.000Z"},"fields":{"slug":"/blog/2016-12-11-3dtouch-peak-and-pop"}}},{"node":{"id":"57b24cc8-39e2-5c82-a50d-71554c0c27da","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-11-27-3dtouch-adopting-shortcut-items-to-your-app.md","excerpt":"With the beginning of the iPhone 6s, Apple has introduced a 3D Touch mechanism which is very cool thing. The 3D Touch is also available on\nthe newest iPhones 7. Nothing indicates that in the future Apple devices will run out of that feature so, here is a quick tutorial on how\nto improve your app using the one of the three main features of 3D Touch.  Modify your Info.plist file Add to your  Info.plist file a special key called UIApplicationShortcutItems. It should be an array. Add items to…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"kwysocki","author_id":null,"title":"3D Touch - Adopting shortcut items to your app.","tags":["iOS","swift","3d touch"],"date":"2016-11-26T23:00:00.000Z"},"fields":{"slug":"/blog/2016-11-27-3dtouch-adopting-shortcut-items-to-your-app"}}}]}},"pageContext":{"limit":10,"skip":160,"numPages":23,"currentPage":17}}}