{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/branding-flavoring","result":{"data":{"markdownRemark":{"html":"<h3>Introduction</h3>\n<p>TypeScript language mainly uses structural typing. In structural typing, an element is considered to be compatible\nwith another if, for each feature within the second element's type, a corresponding and identical feature exists in the\nfirst element's type. Sometimes this behavior may allow us to write erroneous code. </p>\n<h3>Example</h3>\n<p>Let's imagine a function which calculates candy price based on their weight and price per unit:</p>\n<pre><code class=\"language-typescript\">// Create a type for our candy\ntype Candy = {\n  pricePerUnit: number\n  weight: number\n}\n\n// Create a function from our example\nconst calculateCandyPrice = (candy: Candy) => candy.pricePerUnit * candy.weight\n\n// Create a type with similar structure to type Candy\ntype Veggie = {\n  pricePerUnit: number\n  weight: number\n}\n\n// Declare variables based on our types\ndeclare const candyDrops: Candy\ndeclare const broccolis: Veggie\n\n// Is this function safely typed? \ncalculateCandyPrice(candyDrops)                          // OK \ncalculateCandyPrice({ pricePerUnit: 1000, weight: 20 })  // OK \ncalculateCandyPrice(broccolis)                           // OK \n</code></pre>\n<p>TypeScript compiler does not throw an error, even though we as programmes see that this behavior may not be desired.\nThis problem can be solved by nominal typing. Nominal typing means that two variables are type-compatible if and only if\ntheir declarations name the same type. TypeScript unfortunately does not have such a syntax feature. There are some\nmethods which we can use to omit that problem. </p>\n<h3>Branding</h3>\n<p>Branding concept is a technique in which we add a unique field which will make our type differ from another types.\nWhat is important we do not need to assign any value there because it only exists for TypeScript compiler. </p>\n<pre><code class=\"language-typescript\">type Candy = {\n  __brand: \"Candy\"\n  pricePerUnit: number\n  weight: number\n}\n\ntype Veggie = {\n  __brand: \"Veggie\"\n  pricePerUnit: number\n  weight: number\n}\n\nconst calculateCandyPrice = (candy: Candy) => candy.pricePerUnit * candy.weight\n\ndeclare const candyDrops: Candy\ndeclare const broccolis: Veggie\n\ncalculateCandyPrice(candyDrops)                          // OK \ncalculateCandyPrice({ pricePerUnit: 1000, weight: 20 })  // Error\ncalculateCandyPrice(broccolis)                           // Error\n</code></pre>\n<p>We can also create generic type for our branding: </p>\n<pre><code class=\"language-typescript\">type Brand&#x3C;T, BrandT> = T &#x26; { __brand: BrandT }\n\n// Similar type as before\ntype Candy = Brand&#x3C;{ pricePerUnit: number, weight: number }, \"Candy\">\n</code></pre>\n<p>Changing primitive value to branded value requires manual casting:</p>\n<pre><code class=\"language-typescript\">type CandyID = Brand&#x3C;string, \"CandyID\">\n\nconst candyId = \"some-long-id\" as CandyID // Brand&#x3C;string, \"CandyID\">\n</code></pre>\n<p>To make our code cleaner we can use these helpers to change our type to be nominal or reversed: </p>\n<pre><code class=\"language-typescript\">const toCandyID = (id: string) => id as CandyID\nconst fromCandyID = (id: CandyID) => id as string\n\nconst candyIdTo = toCandyID('some-long-id-1') // Brand&#x3C;string, \"CandyID\">\nconst candyIdFrom = fromCandyID(candyIdTo)    // string\n</code></pre>\n<p>Bear in mind that branding has got two cons:</p>\n<ol>\n<li>\n<p>Compiler allow us to read <code>__brand</code> property</p>\n<pre><code class=\"language-typescript\">const brandProperty = candyDrops.__brand // OK \n</code></pre>\n</li>\n<li>\n<p>A raw object passed to the function as an argument stopped working</p>\n<pre><code class=\"language-typescript\">calculateCandyPrice({ pricePerUnit: 1000, weight: 20 })  // Error\n</code></pre>\n</li>\n</ol>\n<h3>Flavoring</h3>\n<p>Flavoring concept is a technique in which we add a unique <strong>optional</strong> field which will make our type differ from another\ntypes. This difference between <em>branding</em> and <em>flavoring</em> allow us to pass a raw object as an argument to the function.\nUnfortunately we still can access <code>__flavor</code> property.</p>\n<pre><code class=\"language-typescript\">type Candy = {\n  __flavor?: \"Candy\"\n  pricePerUnit: number\n  weight: number\n}\n\ntype Veggie = {\n  __flavor?: \"Veggie\"\n  pricePerUnit: number\n  weight: number\n}\n\nconst calculateCandyPrice = (candy: Candy) => candy.pricePerUnit * candy.weight\n\ndeclare const candyDrops: Candy\ndeclare const broccolis: Veggie\n\ncalculateCandyPrice(candyDrops)                          // OK \ncalculateCandyPrice({ pricePerUnit: 1000, weight: 20 })  // OK\ncalculateCandyPrice(broccolis)                           // Error\n</code></pre>\n<p>We can also create generic type for our flavoring:</p>\n<pre><code class=\"language-typescript\">type Flavor&#x3C;T, FlavorT> = T &#x26; { __flavor?: FlavorT }\n\n// Similar type as before\ntype Veggie = Flavor&#x3C;{ pricePerUnit: number, weight: number }, \"Veggie\">\n</code></pre>\n<p>We do not need to cast primitive values manually using this technique.</p>\n<h3>Conclusion</h3>\n<p>To sum up those two techniques - it is commonly used that if we use <em>branding</em> and <em>flavoring</em> we use <em>branding</em> for\nprimitive types while <em>flavoring</em> for objects. We can use\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html\">conditional type</a> for that:</p>\n<pre><code class=\"language-typescript\">type Nominal&#x3C;T, NameT> = T extends object ? Flavor&#x3C;T, NameT> : Brand&#x3C;T, NameT>\n</code></pre>\n<p>Alternatively we can use other more sophisticated techniques to achieve nominal typing or libraries such as:\n<a href=\"https://github.com/gcanti/newtype-ts\">newtype-ts</a> or <a href=\"https://github.com/gcanti/io-ts\">io-ts</a>.</p>","excerpt":"Introduction TypeScript language mainly uses structural typing. In structural typing, an element is considered to be compatible \nwith…","frontmatter":{"slug":null,"title":"Branding & Flavoring","description":null,"author":"wojciech","tags":["typescript","types","candies","veggies"],"date":"2021-01-08T12:12:12.000Z","image":"/images/branding_and_flavoring.png"},"timeToRead":3,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2021-01-08-branding-flavoring.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2021-01-08-branding-flavoring.md"}}}