{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/purelayout-vs-anchors","result":{"data":{"markdownRemark":{"html":"<p>Last week I've made basic comparison between two libraries that will help you layout your interfaces - PureLayout and SnapKit. You can find this comparison <a href=\"https://eliaszsawicki.com/purelayout-vs-snapkit/\">here</a>. Today I'd lake to take the same examples and see how they work with <code>NSLayoutAnchor</code>. <code>NSLayoutAnchor</code> is available to us since iOS 9 and provides us with a new way of creating your constraints. If you do not like creating <code>NSLayoutConstraints</code> using it's initializers or visual format, and do not want any external dependencies for your layout, then <code>NSLayoutAnchor</code> is for you!</p>\n<p>Note before we start:</p>\n<ul>\n<li>We need to set <code>translatesAutoresizingMaskIntoConstraints</code> to <code>false</code> for each view we want to add constraints to.</li>\n<li>Each constraint that we create the \"anchor\" way has to be activated. That's why we use <code>.isActive = true</code>.</li>\n</ul>\n<h2>Simple positioning</h2>\n<p><img src=\"/images/simple-positioning.png\" alt=\"Simple positioning\"></p>\n<pre><code class=\"language-swift\">func pureLayout() {\n    box.autoPinEdge(toSuperviewEdge: .top, withInset: 50)\n    box.autoPinEdge(toSuperviewEdge: .left, withInset: 20)\n    box.autoSetDimensions(to: CGSize(width: 100, height: 100))\n\n    circle.autoPinEdge(.top, to: .top, of: box)\n    circle.autoPinEdge(toSuperviewEdge: .right, withInset: 20)\n    circle.autoSetDimensions(to: CGSize(width: 100, height: 100))\n\n    longer.autoPinEdge(toSuperviewEdge: .left, withInset: 20)\n    longer.autoPinEdge(toSuperviewEdge: .right, withInset: 20)\n    longer.autoPinEdge(.top, to: .bottom, of: box, withOffset: 40)\n    longer.autoSetDimension(.height, toSize: 40)\n}\n\nfunc anchorLayout() {\n    box.translatesAutoresizingMaskIntoConstraints = false\n    circle.translatesAutoresizingMaskIntoConstraints = false\n    longer.translatesAutoresizingMaskIntoConstraints = false\n\n    box.topAnchor.constraint(equalTo: view.topAnchor, constant: 50).isActive = true\n    box.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 20).isActive = true\n    box.widthAnchor.constraint(equalToConstant: 100).isActive = true\n    box.heightAnchor.constraint(equalToConstant: 100).isActive = true\n\n    circle.topAnchor.constraint(equalTo: box.topAnchor).isActive = true\n    circle.rightAnchor.constraint(equalTo: view.rightAnchor, constant: -20).isActive = true\n    circle.widthAnchor.constraint(equalToConstant: 100).isActive = true\n    circle.heightAnchor.constraint(equalToConstant: 100).isActive = true\n\n    longer.topAnchor.constraint(equalTo: box.bottomAnchor, constant: 40).isActive = true\n    longer.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 20).isActive = true\n    longer.rightAnchor.constraint(equalTo: view.rightAnchor, constant: -20).isActive = true\n    longer.heightAnchor.constraint(equalToConstant: 40).isActive = true\n}\n</code></pre>\n<h2>Inside UIScrollView</h2>\n<p><img src=\"/images/Scroll.gif\" alt=\"ScrollView positioning\"></p>\n<pre><code class=\"language-swift\">func pureLayout() {\n    scrollView.autoPinEdgesToSuperviewEdges(with: .zero)\n    scrollView.autoPinEdge(.bottom, to: .bottom, of: longer, withOffset: 20)\n\n    box.autoPinEdge(toSuperviewEdge: .top, withInset: 50)\n    box.autoPinEdge(.left, to: .left, of: self.view, withOffset: 20)\n    box.autoSetDimensions(to: CGSize(width: 100, height: 100))\n\n    circle.autoPinEdge(.top, to: .top, of: box)\n    circle.autoPinEdge(.right, to: .right, of: self.view, withOffset: -20)\n    circle.autoSetDimensions(to: CGSize(width: 100, height: 100))\n\n    longer.autoPinEdge(.left, to: .left, of: self.view, withOffset: 20)\n    longer.autoPinEdge(.right, to: .right, of: self.view, withOffset: -20)\n    longer.autoPinEdge(.top, to: .bottom, of: box, withOffset: 300)\n    longer.autoSetDimension(.height, toSize: 200)\n}\n\nfunc anchorLayout() {\n    scrollView.translatesAutoresizingMaskIntoConstraints = false\n    box.translatesAutoresizingMaskIntoConstraints = false\n    circle.translatesAutoresizingMaskIntoConstraints = false\n    longer.translatesAutoresizingMaskIntoConstraints = false\n\n    scrollView.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true\n    scrollView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true\n    scrollView.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true\n    scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true\n    scrollView.bottomAnchor.constraint(equalTo: longer.bottomAnchor, constant: 20).isActive = true\n\n    box.topAnchor.constraint(equalTo: scrollView.topAnchor, constant: 50).isActive = true\n    box.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 20).isActive = true\n    box.widthAnchor.constraint(equalToConstant: 100).isActive = true\n    box.heightAnchor.constraint(equalToConstant: 100).isActive = true\n\n    circle.topAnchor.constraint(equalTo: box.topAnchor).isActive = true\n    circle.rightAnchor.constraint(equalTo: view.rightAnchor, constant: -20).isActive = true\n    circle.widthAnchor.constraint(equalToConstant: 100).isActive = true\n    circle.heightAnchor.constraint(equalToConstant: 100).isActive = true\n\n    longer.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 20).isActive = true\n    longer.rightAnchor.constraint(equalTo: view.rightAnchor, constant: -20).isActive = true\n    longer.topAnchor.constraint(equalTo: box.bottomAnchor, constant: 300).isActive = true\n    longer.heightAnchor.constraint(equalToConstant: 200).isActive = true\n}\n</code></pre>\n<h2>UIScrollView with a surprise</h2>\n<p><img src=\"/images/ScrollViewSurprise.gif\" alt=\"ScrollView positioning\"></p>\n<pre><code class=\"language-swift\">func pureLayout() {\n    scrollView.autoPinEdgesToSuperviewEdges(with: .zero)\n    scrollView.autoPinEdge(.bottom, to: .bottom, of: longer, withOffset: 20)\n\n    box.autoPinEdge(toSuperviewEdge: .top, withInset: 150)\n    box.autoAlignAxis(toSuperviewAxis: .vertical)\n    box.autoSetDimensions(to: CGSize(width: 100, height: 100))\n\n    circle.autoPinEdge(.bottom, to: .bottom, of: self.view, withOffset: -20, relation: .lessThanOrEqual)\n    circle.autoPinEdge(.bottom, to: .top, of: longer, withOffset: -20, relation: .lessThanOrEqual)\n    circle.autoAlignAxis(toSuperviewAxis: .vertical)\n    circle.autoSetDimensions(to: CGSize(width: 100, height: 100))\n\n    longer.autoPinEdge(.left, to: .left, of: self.view, withOffset: 20)\n    longer.autoPinEdge(.right, to: .right, of: self.view, withOffset: -20)\n    longer.autoPinEdge(.top, to: .bottom, of: box, withOffset: 660)\n    longer.autoSetDimension(.height, toSize: 200)\n}\n\nfunc anchorLayout() {\n    scrollView.translatesAutoresizingMaskIntoConstraints = false\n    box.translatesAutoresizingMaskIntoConstraints = false\n    circle.translatesAutoresizingMaskIntoConstraints = false\n    longer.translatesAutoresizingMaskIntoConstraints = false\n\n    scrollView.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true\n    scrollView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true\n    scrollView.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true\n    scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true\n    scrollView.bottomAnchor.constraint(equalTo: longer.bottomAnchor, constant: 20).isActive = true\n\n    box.topAnchor.constraint(equalTo: scrollView.topAnchor, constant: 150).isActive = true\n    box.centerXAnchor.constraint(equalTo: scrollView.centerXAnchor).isActive = true\n    box.widthAnchor.constraint(equalToConstant: 100).isActive = true\n    box.heightAnchor.constraint(equalToConstant: 100).isActive = true\n\n    circle.bottomAnchor.constraint(lessThanOrEqualTo: view.bottomAnchor, constant: -20).isActive = true\n    circle.bottomAnchor.constraint(lessThanOrEqualTo: longer.topAnchor, constant: -20).isActive = true\n    circle.centerXAnchor.constraint(equalTo: scrollView.centerXAnchor).isActive = true\n    circle.widthAnchor.constraint(equalToConstant: 100).isActive = true\n    circle.heightAnchor.constraint(equalToConstant: 100).isActive = true\n\n    longer.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 20).isActive = true\n    longer.rightAnchor.constraint(equalTo: view.rightAnchor, constant: -20).isActive = true\n    longer.topAnchor.constraint(equalTo: box.bottomAnchor, constant: 660).isActive = true\n    longer.heightAnchor.constraint(equalToConstant: 200).isActive = true\n}\n</code></pre>\n<h2>Updating constraint's constant</h2>\n<p><img src=\"/images/move.gif\" alt=\"ScrollView positioning\"></p>\n<pre><code class=\"language-swift\">var buttonLeftConstraint: NSLayoutConstraint?\n\nfunc pureLayout() {\n    buttonLeftConstraint = animateButton.autoPinEdge(toSuperviewEdge: .left, withInset: 20)\n    animateButton.autoPinEdge(toSuperviewEdge: .top, withInset: 50)\n    animateButton.autoSetDimensions(to: CGSize(width: 100, height: 100))\n}\n\nfunc animate() {\n    UIView.animate(withDuration: 1) {\n        let random: Double = Double(arc4random_uniform(200))\n        self.buttonLeftConstraint?.constant = random\n        self.view.layoutIfNeeded()\n    }\n}\n\n///\n\nvar buttonLeftConstraint: NSLayoutConstraint?\n\nfunc anchorLayout() {\n    animateButton.translatesAutoresizingMaskIntoConstraints = false\n    buttonLeftConstraint = animateButton.leftAnchor.constraint(lessThanOrEqualTo: view.leftAnchor, constant: 20)\n    buttonLeftConstraint?.isActive = true\n    animateButton.topAnchor.constraint(equalTo: view.topAnchor, constant: 50).isActive = true\n    animateButton.widthAnchor.constraint(equalToConstant: 100).isActive = true\n    animateButton.heightAnchor.constraint(equalToConstant: 100).isActive = true\n}\n\nfunc animate() {\n    UIView.animate(withDuration: 1) {\n        let random: CGFloat = CGFloat(arc4random_uniform(200))\n        self.buttonLeftConstraint?.constant = random\n        self.view.layoutIfNeeded()\n    }\n}\n</code></pre>\n<h2>Conclusion</h2>\n<p>I'm really glad that we have <code>NSLayoutAnchor</code>. If you want to create layout in code and avoid any external layout libraries to do this, then <code>NSLayoutAnchor</code> is a valid choice! It won't be as neat and comfy as using <code>PureLayout</code> or <code>SnapKit</code>, but for me it's much much better than visual format or basic <code>NSLayoutConstraint</code> initializer.</p>\n<p>What do you think of NSLayoutAnchor? How do you layout your views? Share your thoughts in comments!</p>\n<p><em>This article is cross-posted with my <a href=\"https://eliaszsawicki.com/\">my personal blog</a>.</em></p>","excerpt":"Last week I've made basic comparison between two libraries that will help you layout your interfaces - PureLayout and SnapKit. You can find…","frontmatter":{"slug":null,"title":"PureLayout vs NSLayoutAnchor - Great confrontation","description":null,"author":"eliasz","tags":["iOS"],"date":"2016-11-05T23:00:00.000Z","image":null},"timeToRead":6,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-11-06-purelayout-vs-anchors.md"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"author_id":"adam","avatar":"/images/members/adam_bar.jpg","bio":"The Web Guy @ Bright Inventions","name":"Adam Bar","web":"https://whatwebcando.today"}},{"frontmatter":{"author_id":"agnieszka_h","avatar":"/images/members/agnieszka_h.jpg","bio":"Sales Manager @ Bright Inventions","name":"Agnieszka Hayashida","web":null}},{"frontmatter":{"author_id":"agnieszka","avatar":"/images/members/agnieszka_olszewska.jpg","bio":"Fullstack developer","name":"Agnieszka Olszewska","web":null}},{"frontmatter":{"author_id":"olo","avatar":"/images/members/aleksander_wielgorski.jpeg","bio":"Software Engineer @ Bright Inventions","name":"Aleksander Wielgórski","web":null}},{"frontmatter":{"author_id":"alisa","avatar":"/images/members/alisa_kashytska.jpg","bio":"Product designer","name":"Alisa Kashytska","web":null}},{"frontmatter":{"author_id":"azabost","avatar":"/images/members/andrzej_zabost.jpg","bio":"Senior Android developer","name":"Andrzej Zabost","web":"https://azabost.com"}},{"frontmatter":{"author_id":"arturs","avatar":"/images/members/artur.jpg","bio":"iOS developer","name":"Artur Suliński","web":null}},{"frontmatter":{"author_id":"bartek k","avatar":"/images/members/bartek_krzyzanski.jpg","bio":"Backend developer","name":"Bartek Krzyżański","web":null}},{"frontmatter":{"author_id":"bartekr","avatar":"/images/members/bartek.jpg","bio":"iOS developer","name":"Bartek Rozwarski","web":null}},{"frontmatter":{"author_id":"bartosz","avatar":"/images/members/bartosz_szafran.jpg","bio":"Senior Frontend Developer","name":"Bartosz Szafran","web":null}},{"frontmatter":{"author_id":"daniel","avatar":"/images/members/daniel_makurat.jpg","bio":"Co-founder & Senior Backend developer","name":"Daniel Makurat","web":null}},{"frontmatter":{"author_id":"eliasz","avatar":"/images/members/eliasz.png","bio":"Software Engineer @ Bright Inventions","name":"Eliasz Sawicki","web":"http://eluss.github.io/"}},{"frontmatter":{"author_id":"fjablonski","avatar":"/images/members/filip_jablonski.jpg","bio":"Senior iOS developer","name":"Filip Jabłoński","web":null}},{"frontmatter":{"author_id":"grzesiek","avatar":"/images/members/grzegorz_ciesla.jpg","bio":"Software Developer","name":"Grzegorz Cieśla","web":null}},{"frontmatter":{"author_id":"ivan","avatar":"/images/members/ivan.jpg","bio":"Fullstack developer","name":"Ivan Menshykov","web":null}},{"frontmatter":{"author_id":"janek","avatar":"/images/members/janhanc.jpg","bio":"Frontend developer","name":"Jan Hanc","web":null}},{"frontmatter":{"author_id":"kwysocki","avatar":"/images/members/kamil.png","bio":"Software Engineer @ Bright Inventions","name":"Kamil Wysocki","web":"https://wysockikamil.com"}},{"frontmatter":{"author_id":"karoln","avatar":"/images/members/karol_nadratowski.jpg","bio":null,"name":"Karol Nadratowski","web":null}},{"frontmatter":{"author_id":"karol r","avatar":"/images/members/karol_rinc.jpg","bio":"Backend developer","name":"Karol Rinc","web":null}},{"frontmatter":{"author_id":"kasia","avatar":"/images/members/kasia_lukasiewicz.jpg","bio":"Senior Project Manager","name":"Kasia Łukasiewicz","web":null}},{"frontmatter":{"author_id":"kasia g","avatar":"/images/members/katarzyna_galka.jpg","bio":"Project manager","name":"Katarzyna Gałka","web":null}},{"frontmatter":{"author_id":"krzysiek h","avatar":"/images/members/krzysztof_hinc.jpg","bio":"Web developer","name":"Krzysiek Hinc","web":null}},{"frontmatter":{"author_id":"krzysiek","avatar":"/images/members/krzysztof_kaczmarek.jpg","bio":"Senior iOS Developer","name":"Krzysztof Kaczmarek","web":null}},{"frontmatter":{"author_id":"maciej","avatar":"/images/members/maciej_seleman.jpg","bio":"QA Specialist","name":"Maciej Seleman","web":null}},{"frontmatter":{"author_id":"magda","avatar":"/images/members/magda_sadowska.jpg","bio":"Office & HR Assistant","name":"Magda Sadowska","web":null}},{"frontmatter":{"author_id":"maja","avatar":"/images/members/maja_puta.jpg","bio":"Junior QA Specialist","name":"Maja Puta","web":null}},{"frontmatter":{"author_id":"marcink","avatar":"/images/members/marcin_kwiatkowski.jpg","bio":null,"name":"Marcin Kwiatkowski","web":null}},{"frontmatter":{"author_id":"mateusz","avatar":"/images/members/mateusz_klimczak.jpg","bio":"Technical leader & Project manager","name":"Mateusz Klimczak","web":null}},{"frontmatter":{"author_id":"mateuszklimek","avatar":"/images/members/mateuszklimek.png","bio":"Software Engineer @ Bright Inventions","name":"Mateusz Klimek","web":null}},{"frontmatter":{"author_id":"michal k","avatar":"/images/members/michal_koszalka.jpg","bio":"Senior Backend developer","name":"Michał Koszałka","web":null}},{"frontmatter":{"author_id":"michał","avatar":"/images/members/michal_wrobel.jpg","bio":"Senior Backend Developer at Bright Inventions","name":"Michał Wróbel","web":null}},{"frontmatter":{"author_id":"michal","avatar":"/images/members/michał_łukasiewicz.jpg","bio":"Co-founder & Senior iOS developer","name":"Michał Łukasiewicz","web":null}},{"frontmatter":{"author_id":"monika","avatar":"/images/members/monika.jpg","bio":"Software Developer @ Bright Inventions","name":"Monika Niegrzybowska","web":null}},{"frontmatter":{"author_id":"nikodem","avatar":"/images/members/nikodem_kalinowski.jpg","bio":"Web developer","name":"Nikodem Kalinowski","web":null}},{"frontmatter":{"author_id":"patryk","avatar":"/images/members/patryk_huzarski.jpg","bio":"Software Developer @ Bright Inventions","name":"Patryk Huzarski","web":null}},{"frontmatter":{"author_id":"patryk sz","avatar":"/images/members/patryk_szlagowski.jpg","bio":"Senior Backend developer","name":"Patryk Szlagowski","web":null}},{"frontmatter":{"author_id":"paweł","avatar":"/images/members/paweł_gutkowski.jpg","bio":"Fullstack Developer at Bright Inventions ","name":"Paweł Gutkowski","web":null}},{"frontmatter":{"author_id":"pawel","avatar":"/images/members/paweł_papkiewicz.jpg","bio":"Fullstack developer","name":"Paweł Papkiewicz","web":null}},{"frontmatter":{"author_id":"piotr","avatar":"/images/members/piotr_mionskowski.jpg","bio":"TDD fan eager to learn new things","name":"Piotr Mionskowski","web":"https://miensol.pl"}},{"frontmatter":{"author_id":"piotr_l","avatar":"/images/members/piotrl.png","bio":"Android Developer @ Bright Inventions","name":"Piotr Łupiński","web":"http://exp.flamaster2.com"}},{"frontmatter":{"author_id":"radek","avatar":"/images/members/radek_pieczątkiewicz.jpg","bio":"Android developer","name":"Radek Pieczątkiewicz","web":null}},{"frontmatter":{"author_id":"radeks","avatar":"/images/members/radoslaw.jpg","bio":"Software Engineer @ Bright Inventions","name":"Radosław Słowiński","web":null}},{"frontmatter":{"author_id":"rafal h","avatar":"/images/members/rafal_hoffman.jpg","bio":"Fullstack developer","name":"Rafał Hofman","web":null}},{"frontmatter":{"author_id":"sebastian","avatar":"/images/members/sebastian_sobczak.jpg","bio":"Junior Account Manager at Bright Inventions ","name":"Sebastian Sobczak","web":null}},{"frontmatter":{"author_id":"szymek","avatar":"/images/members/szymon_miloch.jpg","bio":"Android & Web developer","name":"Szymon Miloch","web":null}},{"frontmatter":{"author_id":"tomek","avatar":"/images/members/tomek.jpeg","bio":null,"name":"Tomasz Gęsior","web":null}},{"frontmatter":{"author_id":"ula","avatar":"/images/members/ula_stankiewicz.jpg","bio":"HR & Marketing Manager","name":"Ula Stankiewicz","web":null}},{"frontmatter":{"author_id":"wojciech","avatar":"/images/members/wojciech_baczyński.jpg","bio":"Fullstack developer","name":"Wojciech Baczyński","web":null}},{"frontmatter":{"author_id":"lukasz","avatar":"/images/members/lukasz_reszetow.jpg","bio":"Android developer","name":"Łukasz Reszetow","web":null}}]},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-11-06-purelayout-vs-anchors.md"}}}